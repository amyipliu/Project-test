library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(tabplot)
library(corrplot)
#Open Data Set ##Set your file location of the properties data set##
dataset <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/properties_2016.csv")
soldhouses <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/train_2016_v2.csv", header = TRUE)
dataset <- as.data.frame(left_join(soldhouses, dataset, by ="parcelid"))
#Remove completely missing rows from the dataset
dataset <- dataset[!is.na(dataset$regionidcounty),]
dataset <- dataset[dataset$regionidcounty==3101,]
#Remove rows that have empty taxvaluedollarcnt as these cannot be predicted
dataset <- dataset[!is.na(dataset$taxvaluedollarcnt),]
#Create table with comparison on missing values
precentageall <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Imputate missing values and transformation of variables
dataset[is.na(dataset$fireplaceflag),"fireplaceflag"] <- 0
dataset[is.na(dataset$fullbathcnt),"fullbathcnt"] <- 0
dataset[is.na(dataset$garagecarcnt),"garagecarcnt"] <- 0
dataset[is.na(dataset$garagetotalsqft),"garagetotalsqft"] <- 0
dataset[is.na(dataset$hashottuborspa),"hashottuborspa"] <- 0
dataset[is.na(dataset$heatingorsystemtypeid),"heatingorsystemtypeid"] <- 0
dataset[is.na(dataset$latitude),"latitude"] <- 0
dataset[is.na(dataset$longitude),"longitude"] <- 0
dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = as.factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Compute missing values in the cleaned data set
precentageallclean <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
classtest <- data.frame(lapply(dataset, function(x) class(x)))
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Create land dataset on rule ....
landdataset <- dataset[!is.na(dataset$regionidzip) & !is.na(dataset$yearbuilt),]
percentageland <- data.frame(lapply(dataset$landdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(precentageall)
rm(precentageallclean)
rm(percentagehous)
rm(percentageland)
rm(classtest)
rm(dataset)
rm(soldhouses)
ggplot(housingdataset, aes(log(structuretaxvaluedollarcnt), airconditioningtypeid))+geom_boxplot()
ggplot(housingdataset, aes(airconditioningtypeid, log(structuretaxvaluedollarcnt)))+geom_boxplot()
housingdataset$airconditioningtypeid <- as.character(housingdataset$airconditioningtypeid)
housingdataset$heatingorsystemtypeid <- as.character(housingdataset$heatingorsystemtypeid)
housingdataset[housingdataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
housingdataset[housingdataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
housingdataset[housingdataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
housingdataset[housingdataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
housingdataset[housingdataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
housingdataset[housingdataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
housingdataset[housingdataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
housingdataset[housingdataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
housingdataset$heatingorsystemtypeid <- factor(housingdataset$heatingorsystemtypeid)
housingdataset$airconditioningtypeid <- factor(housingdataset$airconditioningtypeid)
ggplot(housingdataset, aes(airconditioningtypeid, log(structuretaxvaluedollarcnt)))+geom_boxplot()
ggplot(housingdataset, aes(airconditioningtypeid, log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Airconditioning Type")
t.test(housingdataset ~ airconditioningtypeid)
t.test(housingdataset$structuretaxvaluedollarcnt ~ housingdataset$airconditioningtypeid)
ggplot(housingdataset, aes(bathroomcnt, log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Bathroom count")
ggplot(housingdataset, aes(log(bathroomcnt), log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Bathroom count")
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdatase$tbathroomcnt)
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$bathroomcnt)
ggplot(housingdataset, aes(bedroomcnt, log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Bedroomcnt count")
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$bedroomcnt)
ggplot(housingdataset, aes(buildingqualitytypeid, log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Building Quality")
ggplot(housingdataset, aes(buildingqualitytypeid, log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Bathroom count")
ggplot(housingdataset, aes(buildingqualitytypeid, log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Building Qualitytype")
ggplot(housingdataset, aes(factor(buildingqualitytypeid), log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Building Qualitytype")
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$buildingqualitytypeid)
aov(log(housingdataset$structuretaxvaluedollarcnt ~ factor(housingdataset$buildingqualitytypeid))
structuretaxvaluedollarcnt~ +  +  + buildingqualitytypeid +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt + numberofstories +
regionidzip + unitcnt
library(caret)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
#Linear model with Box Cox transformation
#Model estimation normal
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt + buildingqualitytypeid +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt + numberofstories +
regionidzip + unitcnt, data = train)
aov(log(housingdataset$structuretaxvaluedollarcnt ~ factor(housingdataset$buildingqualitytypeid)))
aov(log(housingdataset$structuretaxvaluedollarcnt , factor(housingdataset$buildingqualitytypeid)))
anova(log(housingdataset$structuretaxvaluedollarcnt , factor(housingdataset$buildingqualitytypeid)))
cor.test(housingdataset$structuretaxvaluedollarcnt, housingdataset$buildingqualitytypeid)
ggplot(housingdataset, aes(calculatedfinishedsquarefeet, log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Bedroomcnt count")
ggplot(housingdataset, aes(log(calculatedfinishedsquarefeet), log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Bedroomcnt count")
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$calculatedfinishedsquarefeet)
cor.test(log(housingdataset$structuretaxvaluedollarcnt), log(housingdataset$calculatedfinishedsquarefeet))
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$calculatedfinishedsquarefeet)
cor.test(log(housingdataset$structuretaxvaluedollarcnt), log(housingdataset$calculatedfinishedsquarefeet))
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$calculatedfinishedsquarefeet)
ggplot(housingdataset, aes(factor(heatingorsystemtypeid), log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Heating System")
cor.test(housingdataset$structuretaxvaluedollarcnt, housingdataset$heatingorsystemtypeid)
aov(housingdataset$structuretaxvaluedollarcnt ~ housingdataset$heatingorsystemtypeid, data = housingdataset)
levene.test(housingdataset$structuretaxvaluedollarcnt ~ housingdataset$heatingorsystemtypeid)
ggplot(housingdataset, aes(factor(poolcnt), log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Number of Pools")
t.test(housingdataset$structuretaxvaluedollarcnt ~ housingdataset$poolcnt)
ggplot(housingdataset, aes(factor(yearbuilt), log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Number of Pools")
ggplot(housingdataset, aes(factor(yearbuilt), log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Number of Pools")
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$yearbuilt)
ggplot(housingdataset, aes(factor(numberofstories), log(structuretaxvaluedollarcnt)))+geom_point()+ggtitle("Year Build")
ggplot(housingdataset, aes(factor(numberofstories), log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Year Build")
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt + numberofstories +
regionidzip + unitcnt, data = train)
summary(model)
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$numberofstories)
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
regionidzip + unitcnt, data = train)
summary(model)
library(caret)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
#Linear model with Box Cox transformation
#Model estimation normal
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
regionidzip + unitcnt, data = train)
bc <- boxCox(model)
lambda = bc$x[which(bc$y == max(bc$y))]
lambda
#Model estimation with box coxs transformation
structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
model2 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt  +
unitcnt+regionidzip , data = train)
#Reduced for computational testing
#train <- train[1:5000,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
#  "calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
#                        "unitcnt","regionidzip")]
#structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
train$structuretaxvaluedollarcnt <- NULL
library(MASS)
model.empty = lm(structuretaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(structuretaxvaluedollarcnt.bc ~ ., data = train)
scope = list(lower = formula(model.empty), upper = formula(model.full))
model3 = step(model2, scope, direction = "both", k = 2)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
regionidzip + unitcnt, data = train)
bc <- boxCox(model)
library(caret)
library(car)
library(caret)
library(car)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
#Linear model with Box Cox transformation
#Model estimation normal
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
regionidzip + unitcnt, data = train)
bc <- boxCox(model)
lambda = bc$x[which(bc$y == max(bc$y))]
lambda
#Model estimation with box coxs transformation
structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
model2 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt  +
unitcnt+regionidzip , data = train)
#Reduced for computational testing
#train <- train[1:5000,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
#  "calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
#                        "unitcnt","regionidzip")]
#structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
train$structuretaxvaluedollarcnt <- NULL
library(MASS)
model.empty = lm(structuretaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(structuretaxvaluedollarcnt.bc ~ ., data = train)
scope = list(lower = formula(model.empty), upper = formula(model.full))
model3 = step(model2, scope, direction = "both", k = 2)
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
train <- train[ ,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
train <- train[1:58301 ,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
train <- train[1:58301,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt","calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt", "unitcnt","regionidzip")]
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt","calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt", "unitcnt","regionidzip")]
ggplot(housingdataset, aes(factor(buildingqualitytypeid), log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Building Qualitytype")
cor.test(housingdataset$structuretaxvaluedollarcnt, housingdataset$buildingqualitytypeid)
train <- train[1:5000,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
colnames(train)
train <- train[1:5000,c("airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
library(MASS)
model.empty = lm(structuretaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(structuretaxvaluedollarcnt.bc ~ ., data = train)
train <- train[,c("airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
train = housingdataset[-folds[[1]], ]
train <- train[,c("airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt","regionidzip")]
model.empty = lm(structuretaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(structuretaxvaluedollarcnt.bc ~ ., data = train)
scope = list(lower = formula(model.empty), upper = formula(model.full))
colnames(train)
colnames(housingdataset)
ggplot(housingdataset, aes(garagetotalsqft, log(structuretaxvaluedollarcnt)))+geom_point()
svm.mmc.linear$index
dataset <- read.csv("C:/Users/Steven Jongerden/Desktop/[10] Wine Quality.csv")
head(dataset)
#Question 1.1
dataset$quality <- factor(ifelse(dataset$quality <= 5, "Low", "High"))
summary(dataset$quality)
#Question 1.2
library(caret)
set.seed(0)
folds = createFolds(dataset$fixed.acidity, 5)
test = dataset[folds[[1]], ]
train = dataset[-folds[[1]], ]
#Question 1.3
ggplot(dataset, aes(quality, pH))+geom_boxplot()
ggplot(dataset, aes(quality, residual.sugar))+geom_boxplot()
ggplot(dataset, aes(quality, sulphates))+geom_boxplot()
ggplot(dataset, aes(quality, alcohol))+geom_boxplot()
ggplot(dataset, aes(quality, chlorides))+geom_boxplot()
ggplot(dataset, aes(quality, citric.acid))+geom_boxplot()
#The maximum margin classifier could be fit on this data but would not return desirable results.
#This is because the classes are overlapping with on a nother and the SVM with soft boundaries is more
#suitable for such data.
#Question 1.4
library(e1071)
svm_training = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = 10^(seq(-5, .1, length = 100))))
plot(svm_training$performances$cost,
svm_training$performances$error,
xlab = "Cost",
ylab = "Error Rate",
type = "l")
library(dplyr)
performance <-data.frame(cbind(svm_training$performances$cost, svm_training$performances$error))
colnames(performance) <- c("Cost","Error")
arrange(performance, Error)
#THe best cost parameter is approximately: 8.225296e-02
#The best error rate is:0.2611159
#No, because the error rate declines very fast with increasing cost.
#Question 1.5
svm.mmc.linear = svm(quality ~ .,
data = train,
kernel = "linear",
cost = svm_training$best.parameters)
svm.mmc.linear$index
summary(svm.mmc.linear)
svm.mmc.alldata = svm(quality ~ .,
data = dataset,
kernel = "linear",
cost = svm_training$best.parameters)
length(svm.mmc.alldata$index)
svm.mmc.alldata$index
data.frame(svm.mmc.alldata$index)
svm.mmc.alldata$performance$error
svm.mmc.alldata$degree
summary(svm.mmc.alldata)
svm.mmc.alldata$cost
svm.mmc.alldata$gamma
svm.mmc.alldata$coef0
svm.mmc.alldata$rho
?svm
svm_alldatat = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = svm_training$best.parameters))))
svm_alldatat = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = svm_training$best.parameters)))
svm_alldatat = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = svm_training$best.parameters))
length(svm.mmc.alldata$index)
svm.mmc.alldata$rho
svm.mmc.alldata$epsilon
length(svm_alldatat$index)
summary(svm.mmc.alldata)
plot(model, dataset, free.sulfur.dioxide ~
total.sulfur.dioxide)
plot(svm.mmc.alldata, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm_training, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm.mmc.linear, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
set.seed(0)
x1 = c(rnorm(100, 0, 4), rnorm(100, 1, 3))
x2 = c(rnorm(100, 0, 1), rnorm(100, 6, 1))
y = as.factor(c(rep(-1, 100), rep(1, 100)))
linearly.separable = data.frame(x1, x2, y)
plot(linearly.separable$x1, linearly.separable$x2, col = linearly.separable$y)
set.seed(0)
train.index = sample(1:200, 200*.8)
test.index = -train.index
library(e1071)
svm.mmc.linear = svm(y ~ ., #Familiar model fitting notation.
data = linearly.separable, #Using the linearly separable data.
subset = train.index, #Using the training data.
kernel = "linear", #Using a linear kernel.
cost = 1e6) #A very large cost; default is 1.
plot(svm.mmc.linear, linearly.separable[train.index, ])
plot(svm.mmc.linear, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm_training, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm.mmc.linear, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
