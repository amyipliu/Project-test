dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset$hashottuborspa <- ifelse(dataset$hashottuborspa == "true", 1, 0)
dataset$taxdelinquencyflag <- ifelse(dataset$taxdelinquencyflag == "Y", 1, 0)
dataset[is.na(dataset$taxdelinquencyyear),"taxdelinquencyyear"] <- 0
dataset[is.na(dataset$yearbuilt), "yearbuilt"] <- mean(dataset$yearbuilt, na.rm = TRUE)
dataset[is.na(dataset$taxamount), "taxamount"] <- 0.02001632 * dataset[is.na(dataset$taxamount), "taxvaluedollarcnt"]
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset$transactiondate <- base::as.Date(dataset$transactiondate)
dataset$hashottuborspa <- factor(dataset$hashottuborspa)
dataset$propertycountylandusecode <- factor(dataset$propertycountylandusecode)
dataset$taxdelinquencyflag <- factor(dataset$taxdelinquencyflag)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Compute missing values in the cleaned data set
precentageallclean <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
classtest <- data.frame(sapply(dataset, function(x) class(x)))
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
dataset$fireplaceflag <- NULL
dataset$propertyzoningdesc <- NULL
dataset$airconditioningtypeid <- as.character(dataset$airconditioningtypeid)
dataset$heatingorsystemtypeid <- as.character(dataset$heatingorsystemtypeid)
dataset[dataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
dataset[dataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
dataset[dataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset[dataset$propertylandusetypeid==31, "propertylandusetypeid"] <-"Commercial/Office/Residential Mixed Used"
dataset[dataset$propertylandusetypeid==47, "propertylandusetypeid"] <-"Store/Office (Mixed Use)"
dataset[dataset$propertylandusetypeid==246, "propertylandusetypeid"] <-"Duplex"
dataset[dataset$propertylandusetypeid==247, "propertylandusetypeid"] <-"Triplex"
dataset[dataset$propertylandusetypeid==248, "propertylandusetypeid"] <-"Quadruplex"
dataset[dataset$propertylandusetypeid==260, "propertylandusetypeid"] <-"Residential General"
dataset[dataset$propertylandusetypeid==261, "propertylandusetypeid"] <-"Single Family Residential"
dataset[dataset$propertylandusetypeid==263, "propertylandusetypeid"] <-"Mobile Home"
dataset[dataset$propertylandusetypeid==264, "propertylandusetypeid"] <-"Townhouse"
dataset[dataset$propertylandusetypeid==266, "propertylandusetypeid"] <-"Condominium"
dataset[dataset$propertylandusetypeid==267, "propertylandusetypeid"] <-"Cooperative"
dataset[dataset$propertylandusetypeid==269, "propertylandusetypeid"] <-"Planned Unit Development"
dataset$propertylandusetypeid <- factor(dataset$propertylandusetypeid)
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Create land dataset on rule ....
#landdataset <- dataset[!is.na(dataset$regionidzip) & !is.na(dataset$yearbuilt),]
#percentageland <- data.frame(lapply(dataset$landdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(precentageall)
rm(precentageallclean)
rm(percentagehous)
#rm(percentageland)
rm(classtest)
rm(dataset)
rm(soldhouses)
#write.csv(x = totalmissing, "percentage.csv")
#write.csv(housingdataset, "housingdata.csv")
#write.csv(landdataset, "landdataset.csv")
library(caret)
library(car)
library(lmtest)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
#Model1 House tax
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt, data = train)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
summary(model)
vif(model)
BIC(model)
bptest(model)
bgtest(model)
predictedmodel1 = predict(model, newdata = test)
MSEModel1 <- mean((predictedmodel1 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel1 <- sum((predictedmodel1 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model1 <- 1-((RSSModel1/(length(test$structuretaxvaluedollarcnt)-length(summary(model)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model1
#Model2 House Tax
bc <- boxCox(model)
lambda = bc$x[which(bc$y == max(bc$y))]
structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
model2 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt  +
propertylandusetypeid + unitcnt , data = train)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
summary(model2)
vif(model2)
BIC(model2)
bptest(model2)
bgtest(model2)
predictedmodel2 = ((predict(model2, newdata = test)*lambda)+1)^(1/lambda)
MSEModel2 <- mean((predictedmodel2 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel2 <- sum((predictedmodel2 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model2 <- 1-((RSSModel2/(length(test$structuretaxvaluedollarcnt)-length(summary(model2)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model2
#Model3 House Tax
#train <- train[,c("airconditioningtypeid", "bathroomcnt", "bedroomcnt",
#                           "calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
#                           "unitcnt", "propertylandusetypeid", "buildingclasstypeid", "buildingqualitytypeid")]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
library(MASS)
model.empty = lm(structuretaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(structuretaxvaluedollarcnt.bc ~ ., data = train)
scope = list(lower = formula(model.empty), upper = formula(model.full))
model3 = step(model2, scope, direction = "both", k = 2)
summary(model3)
vif(model3)
BIC(model3)
bptest(model3)
bgtest(model3)
predictedmodel3 = ((predict(model3, newdata = test)*lambda)+1)^(1/lambda)
MSEModel3 <- mean((predictedmodel3 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel3 <- sum((predictedmodel3 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model3 <- 1-((RSSModel3/(length(test$structuretaxvaluedollarcnt)-length(summary(model3)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model3
model3 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + calculatedfinishedsquarefeet + heatingorsystemtypeid +
poolcnt + yearbuilt + propertycountylandusecode + finishedsquarefeet15 + taxdelinquencyflag + buildingqualitytypeid+
lotsizesquarefeet + rawcensustractandblock + longitude + latitude + taxdelinquencyyear, data = train)
summary(model3)
vif(model3)
BIC(model3)
bptest(model3)
bgtest(model3)
predictedmodel3 = ((predict(model3, newdata = test)*lambda)+1)^(1/lambda)
model3 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + calculatedfinishedsquarefeet + heatingorsystemtypeid +
poolcnt + yearbuilt  + finishedsquarefeet15 + taxdelinquencyflag + buildingqualitytypeid+
lotsizesquarefeet + rawcensustractandblock + longitude + latitude + taxdelinquencyyear, data = train)
summary(model3)
vif(model3)
BIC(model3)
bptest(model3)
bgtest(model3)
predictedmodel3 = ((predict(model3, newdata = test)*lambda)+1)^(1/lambda)
MSEModel3 <- mean((predictedmodel3 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel3 <- sum((predictedmodel3 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model3 <- 1-((RSSModel3/(length(test$structuretaxvaluedollarcnt)-length(summary(model3)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model3
AdjR2Model2
model.empty = lm(landtaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(landtaxvaluedollarcnt.bc ~ ., data = train)
model.empty = lm(landtaxvaluedollarcnt.bc ~ 1, data = train)
set.seed(0)
folds = createFolds(landdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((test$landtaxvaluedollarcnt - mean(test$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
model4 <- lm(landtaxvaluedollarcnt ~ propertylandusetypeid + calculatedfinishedsquarefeet, data = train)
summary(model4)
vif(model4)
BIC(model4)
bptest(model4)
bgtest(model4)
predictedmodel4 = predict(model4, newdata = test)
MSEModel4 <- mean((predictedmodel4 - test$landtaxvaluedollarcnt)^2)
RSSModel4 <- sum((predictedmodel4 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model4 <- 1-((RSSModel4/(length(test$landtaxvaluedollarcnt)-length(summary(model4)$coefficients)-1))/(TSS/(length(test$landtaxvaluedollarcnt)-1)))
AdjR2Model4
#Model5 Land Tax
bc2 <- boxCox(model4)
lambda2 = bc$x[which(bc2$y == max(bc2$y))]
landtaxvaluedollarcnt.bc = (train$landtaxvaluedollarcnt^lambda2 - 1)/lambda2
model.empty = lm(landtaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(landtaxvaluedollarcnt.bc ~ ., data = train)
scope = list(lower = formula(model.empty), upper = formula(model.full))
model6 = step(model5, scope, direction = "both", k = 2)
model5 <- lm(landtaxvaluedollarcnt.bc ~ propertylandusetypeid + calculatedfinishedsquarefeet, data = train)
model6 = step(model5, scope, direction = "both", k = 2)
set.seed(0)
folds = createFolds(landdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((test$landtaxvaluedollarcnt - mean(test$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
model4 <- lm(landtaxvaluedollarcnt ~ propertylandusetypeid + calculatedfinishedsquarefeet, data = train)
summary(model4)
vif(model4)
BIC(model4)
bptest(model4)
bgtest(model4)
predictedmodel4 = predict(model4, newdata = test)
MSEModel4 <- mean((predictedmodel4 - test$landtaxvaluedollarcnt)^2)
RSSModel4 <- sum((predictedmodel4 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model4 <- 1-((RSSModel4/(length(test$landtaxvaluedollarcnt)-length(summary(model4)$coefficients)-1))/(TSS/(length(test$landtaxvaluedollarcnt)-1)))
AdjR2Model4
#Model5 Land Tax
bc2 <- boxCox(model4)
lambda2 = bc$x[which(bc2$y == max(bc2$y))]
landtaxvaluedollarcnt.bc = (train$landtaxvaluedollarcnt^lambda2 - 1)/lambda2
model5 <- lm(landtaxvaluedollarcnt.bc ~ propertylandusetypeid + calculatedfinishedsquarefeet, data = train)
summary(model5)
vif(model5)
BIC(model5)
bptest(model5)
bgtest(model5)
predictedmodel5 = ((predict(model5, newdata = test)*lambda2)+1)^(1/lambda2)
MSEModel5 <- mean((predictedmodel5 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel5 <- sum((predictedmodel5 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model5 <- 1-((RSSModel5/(length(test$landtaxvaluedollarcnt)-length(summary(model5)$coefficients)-1))/(TSS/(length(test$landtaxvaluedollarcnt)-1)))
AdjR2Model5
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
library(MASS)
model.empty = lm(landtaxvaluedollarcnt.bc ~ 1, data = train)
model.full = lm(landtaxvaluedollarcnt.bc ~ ., data = train)
scope = list(lower = formula(model.empty), upper = formula(model.full))
model6 = step(model5, scope, direction = "both", k = 2)
BIC(model5)
model5 <- lm(landtaxvaluedollarcnt.bc ~ propertylandusetypeid + calculatedfinishedsquarefeet + regionzip, data = train)
summary(model5)
model5 <- lm(landtaxvaluedollarcnt.bc ~ propertylandusetypeid + calculatedfinishedsquarefeet + regionidzip, data = train)
summary(model5)
vif(model5)
BIC(model5)
bptest(model5)
bgtest(model5)
predictedmodel5 = ((predict(model5, newdata = test)*lambda2)+1)^(1/lambda2)
MSEModel5 <- mean((predictedmodel5 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel5 <- sum((predictedmodel5 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
model5 <- lm(landtaxvaluedollarcnt.bc ~ propertylandusetypeid + calculatedfinishedsquarefeet, data = train)
summary(model5)
AdjR2Model4
library(glmnet)
library(caret)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <- sapply(train, is.numeric)
train[ind] <- lapply(train[ind], scale)
ind <- sapply(train, is.numeric)
train[ind] <- lapply(train[ind], scale)
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = newx)
MSEModel6 <- mean((lassopredictmodel1 - test$structuretaxvaluedollarcnt)^2)
RSSModel6 <- sum((lassopredictmodel1 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = newx)
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = newx)
newx
bestlambda.lasso = cv.lasso.out$lambda.min
bestlambda.lasso
x = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
MSEModel6 <- mean((lassopredictmodel1 - test$structuretaxvaluedollarcnt)^2)
RSSModel6 <- sum((lassopredictmodel1 - train$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
TSS <- sum((train$structuretaxvaluedollarcnt - mean(train$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
RSSModel6 <- sum((lassopredictmodel1 - train$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
AdjR2Model5
AdjR2Model3
AdjR2Model2
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise", "Land tax linear", "Land tax box cox"),
AdjR2Train = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, AdjR2Model4, AdjR2Model5)
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise", "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model6))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression". "Land tax linear", "Land tax box cox",),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression". "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression", "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression", "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$structuretaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((train$landtaxvaluedollarcnt - mean(train$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(landtaxvaluedollarcnt ~ ., train)[, -1]
y = train$landtaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
x = model.matrix(landtaxvaluedollarcnt ~ ., train)[, -1]
lassopredictmodel2 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
MSEModel7 <- mean((lassopredictmodel2 - train$landtaxvaluedollarcnt)^2)
RSSModel7 <- sum((lassopredictmodel2 - train$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model7 <- 1-(RSSModel7/TSS)
AdjR2Model7
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7))
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, AdjR2Model4, AdjR2Model5, "", "")
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, "", AdjR2Model4, AdjR2Model5, "")
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),2),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, "", AdjR2Model4, AdjR2Model5, "")
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),2),
AdjR2Test = round(c(AdjR2Model1, AdjR2Model2, AdjR2Model3, "", AdjR2Model4, AdjR2Model5, ""),2))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),2),
AdjR2Test = round(c(AdjR2Model1, AdjR2Model2, AdjR2Model3, 0 , AdjR2Model4, AdjR2Model5, 0),2))
Results
Results[3,4]
Results[3,1]
Results[,1]
Results[,2]
Results[1,2]
Results[4,3]
Results[7,3]
Results[4,3] <- ""
Results[7,3] <- ""
Results
