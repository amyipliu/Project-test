y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <- sapply(train, is.numeric)
train[ind] <- lapply(train[ind], scale)
ind <- sapply(train, is.numeric)
train[ind] <- lapply(train[ind], scale)
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = newx)
MSEModel6 <- mean((lassopredictmodel1 - test$structuretaxvaluedollarcnt)^2)
RSSModel6 <- sum((lassopredictmodel1 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = newx)
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = newx)
newx
bestlambda.lasso = cv.lasso.out$lambda.min
bestlambda.lasso
x = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
MSEModel6 <- mean((lassopredictmodel1 - test$structuretaxvaluedollarcnt)^2)
RSSModel6 <- sum((lassopredictmodel1 - train$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
TSS <- sum((train$structuretaxvaluedollarcnt - mean(train$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
RSSModel6 <- sum((lassopredictmodel1 - train$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
AdjR2Model5
AdjR2Model3
AdjR2Model2
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise", "Land tax linear", "Land tax box cox"),
AdjR2Train = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, AdjR2Model4, AdjR2Model5)
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise", "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model6))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression". "Land tax linear", "Land tax box cox",),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression". "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression", "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression", "Land tax linear", "Land tax box cox"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared))
Results
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$structuretaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((train$landtaxvaluedollarcnt - mean(train$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(landtaxvaluedollarcnt ~ ., train)[, -1]
y = train$landtaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
x = model.matrix(landtaxvaluedollarcnt ~ ., train)[, -1]
lassopredictmodel2 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
MSEModel7 <- mean((lassopredictmodel2 - train$landtaxvaluedollarcnt)^2)
RSSModel7 <- sum((lassopredictmodel2 - train$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model7 <- 1-(RSSModel7/TSS)
AdjR2Model7
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2 = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7))
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, AdjR2Model4, AdjR2Model5, "", "")
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, "", AdjR2Model4, AdjR2Model5, "")
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),2),
AdjR2Test = c(AdjR2Model1, AdjR2Model2, AdjR2Model3, "", AdjR2Model4, AdjR2Model5, "")
)
Results
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),2),
AdjR2Test = round(c(AdjR2Model1, AdjR2Model2, AdjR2Model3, "", AdjR2Model4, AdjR2Model5, ""),2))
Results <- data.frame(Model = c("House tax linear", "House tax box cox", "House tax box cox stepwise","House tax Lasso Regression",
"Land tax linear", "Land tax box cox", "Land tax Lasso Regression"),
AdjR2Train = round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared, summary(model3)$adj.r.squared, AdjR2Model6,
summary(model4)$adj.r.squared, summary(model5)$adj.r.squared, AdjR2Model7),2),
AdjR2Test = round(c(AdjR2Model1, AdjR2Model2, AdjR2Model3, 0 , AdjR2Model4, AdjR2Model5, 0),2))
Results
Results[3,4]
Results[3,1]
Results[,1]
Results[,2]
Results[1,2]
Results[4,3]
Results[7,3]
Results[4,3] <- ""
Results[7,3] <- ""
Results
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(tabplot)
library(corrplot)
#Open Data Set ##Set your file location of the properties data set##
dataset <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/properties_2016.csv")
soldhouses <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/train_2016_v2.csv", header = TRUE)
dataset <- as.data.frame(left_join(soldhouses, dataset, by ="parcelid"))
#Remove completely missing rows from the dataset
dataset <- dataset[!is.na(dataset$regionidcounty),]
dataset <- dataset[dataset$regionidcounty==3101,]
#Remove rows that have empty taxvaluedollarcnt as these cannot be predicted
dataset <- dataset[!is.na(dataset$taxvaluedollarcnt),]
#Create table with comparison on missing values
precentageall <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Imputate missing values and transformation of variables
dataset[is.na(dataset$fireplaceflag),"fireplaceflag"] <- 0
dataset[is.na(dataset$fullbathcnt),"fullbathcnt"] <- 0
dataset[is.na(dataset$garagecarcnt),"garagecarcnt"] <- 0
dataset[is.na(dataset$garagetotalsqft),"garagetotalsqft"] <- 0
dataset[is.na(dataset$hashottuborspa),"hashottuborspa"] <- 0
dataset[is.na(dataset$heatingorsystemtypeid),"heatingorsystemtypeid"] <- 0
dataset[is.na(dataset$latitude),"latitude"] <- 0
dataset[is.na(dataset$longitude),"longitude"] <- 0
dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset$hashottuborspa <- ifelse(dataset$hashottuborspa == "true", 1, 0)
dataset$taxdelinquencyflag <- ifelse(dataset$taxdelinquencyflag == "Y", 1, 0)
dataset[is.na(dataset$taxdelinquencyyear),"taxdelinquencyyear"] <- 0
dataset[is.na(dataset$yearbuilt), "yearbuilt"] <- mean(dataset$yearbuilt, na.rm = TRUE)
dataset[is.na(dataset$taxamount), "taxamount"] <- 0.02001632 * dataset[is.na(dataset$taxamount), "taxvaluedollarcnt"]
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset$transactiondate <- base::as.Date(dataset$transactiondate)
dataset$hashottuborspa <- factor(dataset$hashottuborspa)
dataset$propertycountylandusecode <- factor(dataset$propertycountylandusecode)
dataset$taxdelinquencyflag <- factor(dataset$taxdelinquencyflag)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Compute missing values in the cleaned data set
precentageallclean <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
classtest <- data.frame(sapply(dataset, function(x) class(x)))
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
dataset$fireplaceflag <- NULL
dataset$propertyzoningdesc <- NULL
dataset$airconditioningtypeid <- as.character(dataset$airconditioningtypeid)
dataset$heatingorsystemtypeid <- as.character(dataset$heatingorsystemtypeid)
dataset[dataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
dataset[dataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
dataset[dataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset[dataset$propertylandusetypeid==31, "propertylandusetypeid"] <-"Commercial/Office/Residential Mixed Used"
dataset[dataset$propertylandusetypeid==47, "propertylandusetypeid"] <-"Store/Office (Mixed Use)"
dataset[dataset$propertylandusetypeid==246, "propertylandusetypeid"] <-"Duplex"
dataset[dataset$propertylandusetypeid==247, "propertylandusetypeid"] <-"Triplex"
dataset[dataset$propertylandusetypeid==248, "propertylandusetypeid"] <-"Quadruplex"
dataset[dataset$propertylandusetypeid==260, "propertylandusetypeid"] <-"Residential General"
dataset[dataset$propertylandusetypeid==261, "propertylandusetypeid"] <-"Single Family Residential"
dataset[dataset$propertylandusetypeid==263, "propertylandusetypeid"] <-"Mobile Home"
dataset[dataset$propertylandusetypeid==264, "propertylandusetypeid"] <-"Townhouse"
dataset[dataset$propertylandusetypeid==266, "propertylandusetypeid"] <-"Condominium"
dataset[dataset$propertylandusetypeid==267, "propertylandusetypeid"] <-"Cooperative"
dataset[dataset$propertylandusetypeid==269, "propertylandusetypeid"] <-"Planned Unit Development"
dataset$propertylandusetypeid <- factor(dataset$propertylandusetypeid)
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Create land dataset on rule ....
#landdataset <- dataset[!is.na(dataset$regionidzip) & !is.na(dataset$yearbuilt),]
#percentageland <- data.frame(lapply(dataset$landdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(precentageall)
rm(precentageallclean)
rm(percentagehous)
#rm(percentageland)
rm(classtest)
rm(dataset)
rm(soldhouses)
library(readr)
library(ggplot2)
housingdata <- read_csv("C:/Users/Steven Jongerden/Desktop/housingdata.csv")
#Comparison of building year of sample with population "Los Angeles"
buidingyear <-data.frame(table(housingdata$yearbuilt))
colnames(buidingyear) <- c("Building year", "Freq")
buidingyear$`Building year` <- as.numeric(as.character(buidingyear$`Building year`))
#Data from the Central Bureau of Statistics on the year 2015.
YearConstruction <- data.frame("Population" = c(525439, 376213, 717794, 512174, 484699,
407955, 218802, 210182, 21848, 1612),
"Sample" = c(0,0,0,0,0,0,0,0,0,0))
YearConstruction <-cbind(YearConstruction, data.frame(Description = c("Built 1939 or earlier",
"Built 1940 to 1949",
"Built 1950 to 1959",
"Built 1960 to 1969",
"Built 1970 to 1979",
"Built 1980 to 1989",
"Built 1990 to 1999",
"Built 2000 to 2009",
"Built 2010 to 2013",
"Built 2014 or later")))
YearConstruction[1,2] = sum(buidingyear[buidingyear<=1939, "Freq"], na.rm = TRUE)
YearConstruction[2,2] = sum(buidingyear[buidingyear>=1940 & buidingyear<=1949, "Freq"], na.rm = TRUE)
YearConstruction[3,2] = sum(buidingyear[buidingyear>=1950 & buidingyear<=1959, "Freq"], na.rm = TRUE)
YearConstruction[4,2] = sum(buidingyear[buidingyear>=1960 & buidingyear<=1969, "Freq"], na.rm = TRUE)
YearConstruction[5,2] = sum(buidingyear[buidingyear>=1970 & buidingyear<=1979, "Freq"], na.rm = TRUE)
YearConstruction[6,2] = sum(buidingyear[buidingyear>=1980 & buidingyear<=1989, "Freq"], na.rm = TRUE)
YearConstruction[7,2] = sum(buidingyear[buidingyear>=1990 & buidingyear<=1999, "Freq"], na.rm = TRUE)
YearConstruction[8,2] = sum(buidingyear[buidingyear>=2000 & buidingyear<=2009, "Freq"], na.rm = TRUE)
YearConstruction[9,2] = sum(buidingyear[buidingyear>=2010 & buidingyear<=2013, "Freq"], na.rm = TRUE)
YearConstruction[10,2] = sum(buidingyear[buidingyear>=2014, "Freq"], na.rm = TRUE)
correctionfactor <- sum(YearConstruction$Population)/sum(YearConstruction$Sample)
YearConstruction$CorrectedPop <- round(YearConstruction$Population / correctionfactor,0)
sum(YearConstruction$Sample)
sum(YearConstruction$CorrectedPop)
chisq.test(YearConstruction$CorrectedPop, YearConstruction$Sample)
plot1a<-YearConstruction[,c("Description", "CorrectedPop")]
colnames(plot1a) <- c("Description", "Data")
plot1a$Set <- "Population"
plot1b<-YearConstruction[,c("Description", "Sample")]
colnames(plot1b) <- c("Description", "Data")
plot1b$Set <- "Sample"
plot1 <- rbind(plot1a, plot1b)
ggplot(plot1, aes(Description, Data, fill=Set))+geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 30, hjust = 1), panel.background = element_rect(fill="white")) +
xlab("Construction year") + ylab("Count") +
scale_fill_brewer(palette="Blues") + ggtitle("Comparison of Construction Year")
#Comparison of the tax value
HouseValue <- data.frame("Population" = c(45323, 27508, 35280, 55574, 196281,
525246, 456642, 158025),
"Sample" = c(0,0,0,0,0,0,0,0))
HouseValue[1,2] = nrow(housingdata[housingdata$taxvaluedollarcnt<50000,])
HouseValue[2,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>=50000 & housingdata$taxvaluedollarcnt<100000,])
HouseValue[3,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>=100000 & housingdata$taxvaluedollarcnt<150000,])
HouseValue[4,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>=150000 & housingdata$taxvaluedollarcnt<200000,])
HouseValue[5,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>=200000 & housingdata$taxvaluedollarcnt<300000,])
HouseValue[6,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>=300000 & housingdata$taxvaluedollarcnt<500000,])
HouseValue[7,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>=500000 & housingdata$taxvaluedollarcnt<1000000,])
HouseValue[8,2] = nrow(housingdata[housingdata$taxvaluedollarcnt>1000000,])
correctionfactor <- sum(HouseValue$Population)/sum(HouseValue$Sample)
HouseValue$CorrectedPop <- round(HouseValue$Population / correctionfactor,0)
sum(HouseValue$Sample)
sum(HouseValue$CorrectedPop)
chisq.test(HouseValue$CorrectedPop, HouseValue$Sample)
HouseValue <-cbind(HouseValue, data.frame(Description = c("<50000",
">=50000",
">=100000",
">=150000",
">=200000",
">=300000",
">=500000",
">1000000")))
HouseValue$Description
levels(HouseValue$Description) <- c("<50000",">=50000",">=100000",">=150000",">=200000",">=300000",">=500000",">1000000")
plot2a<-HouseValue[,c("Description", "CorrectedPop")]
colnames(plot2a) <- c("Description", "Data")
plot2a$Set <- "Population"
plot2b<-HouseValue[,c("Description", "Sample")]
colnames(plot2b) <- c("Description", "Data")
plot2b$Set <- "Sample"
plot2 <- rbind(plot2a, plot2b)
ggplot(plot2, aes(Description, Data, fill=Set))+geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 30, hjust = 1), panel.background = element_rect(fill="white")) +
xlab("House value") + ylab("Count") +
scale_fill_brewer(palette="Blues") + ggtitle("Comparison of House Value")
#Number of bedrooms
bedroomscount <- data.frame(table(housingdata$bedroomcnt))
colnames(bedroomscount) <- c('Bedrooms', "Freq")
bedroomscount$Bedrooms <- as.numeric(as.character(bedroomscount$Bedrooms))
Bedrooms <- data.frame("Population" = c(213939, 693915, 1054696, 981580, 417703,
114885),
"Sample" = c(0,0,0,0,0,0))
Bedrooms[1,2] = sum(bedroomscount[bedroomscount$Bedrooms==0,])
Bedrooms[2,2] = sum(bedroomscount[bedroomscount$Bedrooms==1,])
Bedrooms[3,2] = sum(bedroomscount[bedroomscount$Bedrooms==2,])
Bedrooms[4,2] = sum(bedroomscount[bedroomscount$Bedrooms==3,])
Bedrooms[5,2] = sum(bedroomscount[bedroomscount$Bedrooms==4,])
Bedrooms[6,2] = sum(bedroomscount[bedroomscount$Bedrooms>=5,])
correctionfactor <- sum(Bedrooms$Population)/sum(Bedrooms$Sample)
Bedrooms$CorrectedPop <- round(Bedrooms$Population / correctionfactor,0)
sum(Bedrooms$Sample)
sum(Bedrooms$CorrectedPop)
chisq.test(Bedrooms$CorrectedPop, Bedrooms$Sample)
Bedrooms <-cbind(Bedrooms, data.frame(Description = c("<0",
">=1",
">=2",
">=3",
">=4",
">=5")))
plot3a<-Bedrooms[,c("Description", "CorrectedPop")]
colnames(plot3a) <- c("Description", "Data")
plot3a$Set <- "Population"
plot3b<-Bedrooms[,c("Description", "Sample")]
colnames(plot3b) <- c("Description", "Data")
plot3b$Set <- "Sample"
plot3 <- rbind(plot3a, plot3b)
ggplot(plot3, aes(Description, Data, fill=Set))+geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 30, hjust = 1), panel.background = element_rect(fill="white")) +
xlab("Number of bedrooms") + ylab("Count") +
scale_fill_brewer(palette="Blues") + ggtitle("Comparison of number of bedrooms")
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt, data = train)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
library(caret)
library(car)
library(lmtest)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt, data = train)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
summary(model)
vif(model)
bc <- boxCox(model)
lambda = bc$x[which(bc$y == max(bc$y))]
structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
ggplot(structuretaxvaluedollarcnt.bc)
ggplot()+geom_histogram(aes(x=structuretaxvaluedollarcnt.bc))
ggplot()+geom_histogram(aes(x=structuretaxvaluedollarcnt.bc), bins = 100)
ggplot()+geom_histogram(aes(x=structuretaxvaluedollarcnt.bc), bins = 1000)
Create corplots with all the numeric variables for landtaxvaluedollarcnt
numeric_features <- names(housingdataset)[sapply(housingdataset, is.numeric)]
corHousingLandTax <- cor(housingdataset %>% select(one_of(numeric_features, "landtaxvaluedollarcnt")), method = "pearson", use = "pairwise.complete.obs")
corHousingLandTax[is.na(corHousingLandTax)] = 0
corrplot(corHousingLandTax, method = "color", order="hclust")
housingdataset2 <- head(housingdataset, 10000)
#Create corplots with all the categorical variables for landtaxvaluedollarcnt
#Minimized to save computation time.
ordinal_features <- c('airconditioningtypeid', 'heatingorsystemtypeid','pooltypeid10', 'pooltypeid7', 'propertylandusetypeid','regionidzip')
corHousingLandTax2 <- cor(data.matrix(housingdataset2 %>% select(one_of(ordinal_features, "landtaxvaluedollarcnt"))), method = "kendall", use = "pairwise.complete.obs")
corrplot(corHousingLandTax2, method = "color", order="hclust")
ordinal_features <- c('airconditioningtypeid', 'buildingqualitytypeid','buildingclasstypeid', 'heatingorsystemtypeid','pooltypeid10', 'pooltypeid7', 'propertylandusetypeid','regionidzip')
corHousinghouseTax2 <- cor(data.matrix(housingdataset %>% select(one_of(ordinal_features, "structuretaxvaluedollarcnt"))), method = "kendall", use = "pairwise.complete.obs")
corrplot(corHousingLandTax2, method = "color", order="hclust")
