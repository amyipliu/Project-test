R2 <- 1 - RSSXGB/TSS
R2
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6, print_every_n = FALSE
eta = 0.3, nthread = 4, nround = 200, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6, print_every_n = FALSE,
eta = 0.3, nthread = 4, nround = 200, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6, verbose = 0,
eta = 0.3, nthread = 4, nround = 200, objective = "reg:linear")
testtingd = []
testtingd = []
testtingd <- []
testtingd <- [0]
testtingd <- []
testtingd <- c()
testtingd
testtingd + 1
RTrain <- c(RTrain, R2train)
RTrain <- c()
RTrain <- c(RTrain, R2train)
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
for (z in 0.1:0.6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt =+ 1
print("itteration" + str(itt))
}
}
print("itteration" + itt)
print(paste("itteration: ", itt))
print(paste("Ttteration: ", itt))
for (z in 0.1:0.6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt =+ 1
print(paste("Itteration: ", itt))
}
}
for (z in 0.1:0.6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(RTest)
print(RTrain)
}
}
R2train
RTest <- c(RTest, R2test)
RTest
testtingd <- c()
R2train
RTest <- c(RTest, R2test)
RTest
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 200, objective = "reg:linear")
for (z in 1:6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
for (z in 1:6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
RTrain
resultsXG <- rbind(Depth, Eta, RTrain, RTest)
resultsXG
resultsXG <- cbind(Depth, Eta, RTrain, RTest)
resultsXG
ggplot(resultsXG, aes(x=RTrain, y=RTest))+geom_line()
ggplot(resultsXG, aes(x=RTrain, y=RTest))+geom_point()
resultsXG <- data.frame(cbind(Depth, Eta, RTrain, RTest))
resultsXG
ggplot(resultsXG, aes(x=RTrain, y=RTest))+geom_point()
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth))+geom_point()
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth))+geom_point()+ggtitle("Xgboost Results")
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, fill= Eta))+geom_point()+ggtitle("Xgboost Results")
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, shape= Eta))+geom_point()+ggtitle("Xgboost Results")
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, size= Eta))+geom_point()+ggtitle("Xgboost Results")
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
for (z in 1:10){
for (i in 1:10){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 300, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
resultsXG <- data.frame(cbind(Depth, Eta, RTrain, RTest))
resultsXG
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, size= Eta))+geom_point()+ggtitle("Xgboost Results")
arrange(resultsXG, RTest)
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
Nround <- c()
for (x in 1:5){
for (z in 1:10){
for (i in 1:10){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
RTest <- c(RTest, R2test)
Nround <- c(Nround, x)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
}
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
Nround <- c()
for (x in 1:5){
for (z in 1:10){
for (i in 1:10){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
TSS <- sum((labels - mean(labels, na.rm =  TRUE))^2)
R2train <- 1 - RSSXGBtrain/TSS
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
RTest <- c(RTest, R2test)
Nround <- c(Nround, x)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
}
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear", eval_metric = "logloss")
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
Nround <- c()
for (x in 1:2){
for (z in 1:3){
for (i in 1:3){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear", eval_metric = "logloss")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
TSS <- sum((labels - mean(labels, na.rm =  TRUE))^2)
R2train <- 1 - RSSXGBtrain/TSS
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
RTest <- c(RTest, R2test)
Nround <- c(Nround, x)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
}
bst.cv = xgb.cv(param=param, data = as.matrix(train), label = labels, nfold = 10, nrounds = 20)
param <- list("objective" = "reg:linear",
"eval_metric" = "logloss",
"eta" = 1, "max.depth" = 2)
bst.cv = xgb.cv(param=param, data = as.matrix(train), label = labels, nfold = 10, nrounds = 20)
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
library(xgboost)
param <- list("objective" = "reg:linear",
"eval_metric" = "logloss",
"eta" = 1, "max.depth" = 2)
bst.cv = xgb.cv(param=param, data = as.matrix(train), label = labels, nfold = 10, nrounds = 20)
install.packages("xgboost")
install.packages("xgboost")
install.packages("xgboost")
install.packages("xgboost")
library(xgboost)
install.packages("xgboost")
install.packages("xgboost")
#######################################################################################################################################################################################
#######################################################################################################################################################################################
######################################################### Machine Learning Assignment for NYC Data Science Academy ####################################################################
#######################################################################################################################################################################################
#######################################################################################################################################################################################
#Loading packages
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(tabplot)
library(corrplot)
library(caret)
library(car)
library(lmtest)
library(tree)
library(randomForest)
library(glmnet)
#######################################################################################################################################################################################
############################################################################### Opening Data sets ####################################################################################
#######################################################################################################################################################################################
#Open Data Set ##Set your file location of the properties data set##
dataset <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/properties_2016.csv")
soldhouses <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/train_2016_v2.csv", header = TRUE)
dataset <- as.data.frame(left_join(soldhouses, dataset, by ="parcelid"))
#Missing Information In Data Set
MissingValues <- data.frame(missing = sapply(dataset, function(x) round(sum(is.na(x))/nrow(dataset),4)))
MissingValues$variable <- rownames(MissingValues)
MissingValues <- arrange(MissingValues, desc(missing)) %>% select(variable, missing)
ggplot(MissingValues, aes(x=reorder(variable, missing), y = missing))+geom_bar(stat = "identity") + coord_flip() +
ylab("Percentage Missing") + xlab("Variable") + ggtitle("Percentage of missing in variables")
#######################################################################################################################################################################################
################################################################################ Data Cleaning ########################################################################################
#######################################################################################################################################################################################
#Remove completely missing rows from the dataset
dataset <- dataset[!is.na(dataset$regionidcounty),]
dataset <- dataset[dataset$regionidcounty==3101,]
#Remove rows that have empty taxvaluedollarcnt as these cannot be predicted
dataset <- dataset[!is.na(dataset$taxvaluedollarcnt),]
#Imputate missing values that cannot be imputated otherwise
dataset[is.na(dataset$fireplaceflag),"fireplaceflag"] <- 0
dataset[is.na(dataset$fullbathcnt),"fullbathcnt"] <- 0
dataset[is.na(dataset$garagecarcnt),"garagecarcnt"] <- 0
dataset[is.na(dataset$garagetotalsqft),"garagetotalsqft"] <- 0
dataset[is.na(dataset$hashottuborspa),"hashottuborspa"] <- 0
dataset[is.na(dataset$heatingorsystemtypeid),"heatingorsystemtypeid"] <- 0
dataset[is.na(dataset$latitude),"latitude"] <- 0
dataset[is.na(dataset$longitude),"longitude"] <- 0
dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset$hashottuborspa <- ifelse(dataset$hashottuborspa == "true", 1, 0)
dataset$taxdelinquencyflag <- ifelse(dataset$taxdelinquencyflag == "Y", 1, 0)
dataset[is.na(dataset$taxdelinquencyyear),"taxdelinquencyyear"] <- 0
#Imputating missing variables
dataset[is.na(dataset$yearbuilt), "yearbuilt"] <- mean(dataset$yearbuilt, na.rm = TRUE)
dataset[is.na(dataset$taxamount), "taxamount"] <- 0.02001632 * dataset[is.na(dataset$taxamount), "taxvaluedollarcnt"]
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
#Recoding variables from numbers to factors
dataset[dataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
dataset[dataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
dataset[dataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$propertylandusetypeid==31, "propertylandusetypeid"] <-"Commercial/Office/Residential Mixed Used"
dataset[dataset$propertylandusetypeid==47, "propertylandusetypeid"] <-"Store/Office (Mixed Use)"
dataset[dataset$propertylandusetypeid==246, "propertylandusetypeid"] <-"Duplex"
dataset[dataset$propertylandusetypeid==247, "propertylandusetypeid"] <-"Triplex"
dataset[dataset$propertylandusetypeid==248, "propertylandusetypeid"] <-"Quadruplex"
dataset[dataset$propertylandusetypeid==260, "propertylandusetypeid"] <-"Residential General"
dataset[dataset$propertylandusetypeid==261, "propertylandusetypeid"] <-"Single Family Residential"
dataset[dataset$propertylandusetypeid==263, "propertylandusetypeid"] <-"Mobile Home"
dataset[dataset$propertylandusetypeid==264, "propertylandusetypeid"] <-"Townhouse"
dataset[dataset$propertylandusetypeid==266, "propertylandusetypeid"] <-"Condominium"
dataset[dataset$propertylandusetypeid==267, "propertylandusetypeid"] <-"Cooperative"
dataset[dataset$propertylandusetypeid==269, "propertylandusetypeid"] <-"Planned Unit Development"
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset$transactiondate <- base::as.Date(dataset$transactiondate)
dataset$hashottuborspa <- factor(dataset$hashottuborspa)
dataset$propertycountylandusecode <- factor(dataset$propertycountylandusecode)
dataset$taxdelinquencyflag <- factor(dataset$taxdelinquencyflag)
dataset$airconditioningtypeid <- as.character(dataset$airconditioningtypeid)
dataset$heatingorsystemtypeid <- as.character(dataset$heatingorsystemtypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$propertylandusetypeid <- factor(dataset$propertylandusetypeid)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
dataset$fireplaceflag <- NULL
dataset$propertyzoningdesc <- NULL
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(percentagehous)
rm(dataset)
rm(soldhouses)
rm(MissingValues)
#######################################################################################################################################################################################
##################################################################################### Clustering#######################################################################################
#######################################################################################################################################################################################
num <- sapply(housingdataset, function(x) is.numeric(x))
housingdataset.scale = as.data.frame(scale(housingdataset[,num]))
housingdataset.scale$garagetotalsqft <- NULL
housingdataset.scale$assessmentyear <- NULL
housingdataset.scale$censustractandblock <- NULL
km.test = kmeans(housingdataset.scale, centers = 8)
housingdataset$Clustering <- km.test$cluster
housingdataset$Clustering <- factor(housingdataset$Clustering)
#######################################################################################################################################################################################
##################################################################################### EDA #############################################################################################
########
ggplot(Variance1, aes(x=reorder(variable, variance), y = variance))+geom_bar(stat = "identity") + coord_flip() +
ylab("Variance") + xlab("Variable") + ggtitle("Level of Variance")
colMtx <- matrix(names(housingdataset)[1:length(housingdataset)-1], nrow = 3)
colMtx <- matrix(names(housingdataset)[1:length(housingdataset)-1], nrow = 2)
colMtx <- matrix(names(housingdataset)[1:length(housingdataset)-1], nrow = 1)
for (i in 1:ncol(colMtx)) {
tableplot(housingdataset,
select_string = c(colMtx[,i], "landtaxvaluedollarcnt"),
sortCol = "landtaxvaluedollarcnt", decreasing = TRUE,
nBins = 30)
}
ggplot(housingdataset, aes(Clustering, log(structuretaxvaluedollarcnt)))+geom_boxplot()+ggtitle("Clusters")
ggplot(housingdataset, aes(log(calculatedfinishedsquarefeet), log(structuretaxvaluedollarcnt), color=Clustering))+geom_point()+ggtitle("Clusters") + facet_grid(. ~ Clustering)
ggplot(housingdataset, aes(log(calculatedfinishedsquarefeet), log(structuretaxvaluedollarcnt), color=Clustering))+geom_point()+ggtitle("Clusters")
ggplot(housingdataset, aes(log(calculatedfinishedsquarefeet), log(structuretaxvaluedollarcnt), color=Clustering))+geom_point()+ggtitle("Clusters")
ggplot(housingdataset, aes(log(calculatedfinishedsquarefeet), log(structuretaxvaluedollarcnt), color=Clustering))+geom_point()+ggtitle("Clusters") + facet_grid(. ~ Clustering)
