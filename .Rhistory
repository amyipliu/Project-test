kruskal.test
kruskal.test(structuretaxvaluedollarcnt ~ propertylandusetypeid, data = housingdataset)
kruskal.test(structuretaxvaluedollarcnt ~ heatingorsystemtypeid, data = housingdataset)
t.test(housingdataset$structuretaxvaluedollarcnt ~ housingdataset$airconditioningtypeid)
cor.test(log(housingdataset$structuretaxvaluedollarcnt), housingdataset$bathroomcnt)
######################################################################################################################################################################################
#######################################################################################################################################################################################
######################################################### Machine Learning Assignment for NYC Data Science Academy ####################################################################
#######################################################################################################################################################################################
#######################################################################################################################################################################################
#Loading packages
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(tabplot)
library(corrplot)
library(caret)
library(car)
library(lmtest)
library(tree)
library(randomForest)
library(glmnet)
library(gbm)
#######################################################################################################################################################################################
############################################################################### Opening Data sets ####################################################################################
#######################################################################################################################################################################################
#Open Data Set ##Set your file location of the properties data set##
dataset <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/properties_2016.csv")
soldhouses <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/train_2016_v2.csv", header = TRUE)
dataset <- as.data.frame(left_join(soldhouses, dataset, by ="parcelid"))
#Missing Information In Data Set
MissingValues <- data.frame(missing = sapply(dataset, function(x) round(sum(is.na(x))/nrow(dataset),4)))
MissingValues$variable <- rownames(MissingValues)
MissingValues <- arrange(MissingValues, desc(missing)) %>% select(variable, missing)
ggplot(MissingValues, aes(x=reorder(variable, missing), y = missing))+geom_bar(stat = "identity") + coord_flip() +
ylab("Percentage Missing") + xlab("Variable") + ggtitle("Percentage of missing in variables")
#######################################################################################################################################################################################
################################################################################ Data Cleaning ########################################################################################
#######################################################################################################################################################################################
#Remove completely missing rows from the dataset
dataset <- dataset[!is.na(dataset$regionidcounty),]
dataset <- dataset[dataset$regionidcounty==3101,]
#Remove rows that have empty taxvaluedollarcnt as these cannot be predicted
dataset <- dataset[!is.na(dataset$taxvaluedollarcnt),]
#Imputate missing values that cannot be imputated otherwise
dataset[is.na(dataset$fireplaceflag),"fireplaceflag"] <- 0
dataset[is.na(dataset$fullbathcnt),"fullbathcnt"] <- 0
dataset[is.na(dataset$garagecarcnt),"garagecarcnt"] <- 0
dataset[is.na(dataset$garagetotalsqft),"garagetotalsqft"] <- 0
dataset[is.na(dataset$hashottuborspa),"hashottuborspa"] <- 0
dataset[is.na(dataset$heatingorsystemtypeid),"heatingorsystemtypeid"] <- 0
dataset[is.na(dataset$latitude),"latitude"] <- 0
dataset[is.na(dataset$longitude),"longitude"] <- 0
dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset$hashottuborspa <- ifelse(dataset$hashottuborspa == "true", 1, 0)
dataset$taxdelinquencyflag <- ifelse(dataset$taxdelinquencyflag == "Y", 1, 0)
dataset[is.na(dataset$taxdelinquencyyear),"taxdelinquencyyear"] <- 0
#Imputating missing variables
dataset[is.na(dataset$yearbuilt), "yearbuilt"] <- mean(dataset$yearbuilt, na.rm = TRUE)
dataset[is.na(dataset$taxamount), "taxamount"] <- 0.02001632 * dataset[is.na(dataset$taxamount), "taxvaluedollarcnt"]
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
#Recoding variables from numbers to factors
dataset[dataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
dataset[dataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
dataset[dataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$propertylandusetypeid==31, "propertylandusetypeid"] <-"Commercial/Office/Residential Mixed Used"
dataset[dataset$propertylandusetypeid==47, "propertylandusetypeid"] <-"Store/Office (Mixed Use)"
dataset[dataset$propertylandusetypeid==246, "propertylandusetypeid"] <-"Duplex"
dataset[dataset$propertylandusetypeid==247, "propertylandusetypeid"] <-"Triplex"
dataset[dataset$propertylandusetypeid==248, "propertylandusetypeid"] <-"Quadruplex"
dataset[dataset$propertylandusetypeid==260, "propertylandusetypeid"] <-"Residential General"
dataset[dataset$propertylandusetypeid==261, "propertylandusetypeid"] <-"Single Family Residential"
dataset[dataset$propertylandusetypeid==263, "propertylandusetypeid"] <-"Mobile Home"
dataset[dataset$propertylandusetypeid==264, "propertylandusetypeid"] <-"Townhouse"
dataset[dataset$propertylandusetypeid==266, "propertylandusetypeid"] <-"Condominium"
dataset[dataset$propertylandusetypeid==267, "propertylandusetypeid"] <-"Cooperative"
dataset[dataset$propertylandusetypeid==269, "propertylandusetypeid"] <-"Planned Unit Development"
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset$transactiondate <- base::as.Date(dataset$transactiondate)
dataset$hashottuborspa <- factor(dataset$hashottuborspa)
dataset$propertycountylandusecode <- factor(dataset$propertycountylandusecode)
dataset$taxdelinquencyflag <- factor(dataset$taxdelinquencyflag)
dataset$airconditioningtypeid <- as.character(dataset$airconditioningtypeid)
dataset$heatingorsystemtypeid <- as.character(dataset$heatingorsystemtypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$propertylandusetypeid <- factor(dataset$propertylandusetypeid)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
dataset$fireplaceflag <- NULL
dataset$propertyzoningdesc <- NULL
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(percentagehous)
rm(dataset)
rm(soldhouses)
rm(MissingValues)
#######################################################################################################################################################################################
##################################################################################### Clustering#######################################################################################
#######################################################################################################################################################################################
num <- sapply(housingdataset, function(x) is.numeric(x))
housingdataset.scale = as.data.frame(scale(housingdataset[,num]))
housingdataset.scale$garagetotalsqft <- NULL
housingdataset.scale$assessmentyear <- NULL
housingdataset.scale$censustractandblock <- NULL
km.test = kmeans(housingdataset.scale, centers = 8)
housingdataset$Clustering <- km.test$cluster
housingdataset$Clustering <- factor(housingdataset$Clustering)
#######################################################################################################################################################################################
############################################################################### Linear Regression #####################################################################################
#######################################################################################################################################################################################
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
#Model1 House tax
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + Clustering, data = train)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
summary(model)
vif(model)
BIC(model)
bptest(model)
bgtest(model)
predictedmodel1 = predict(model, newdata = test)
MSEModel1 <- mean((predictedmodel1 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel1 <- sum((predictedmodel1 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model1 <- 1-((RSSModel1/(length(test$structuretaxvaluedollarcnt)-length(summary(model)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model1
#Model2 House Tax
bc <- boxCox(model)
lambda = bc$x[which(bc$y == max(bc$y))]
structuretaxvaluedollarcnt.bc = (train$structuretaxvaluedollarcnt^lambda - 1)/lambda
model2 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt  +
propertylandusetypeid  + Clustering , data = train)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
summary(model2)
vif(model2)
BIC(model2)
bptest(model2)
bgtest(model2)
predictedmodel2 = ((predict(model2, newdata = test)*lambda)+1)^(1/lambda)
MSEModel2 <- mean((predictedmodel2 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel2 <- sum((predictedmodel2 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model2 <- 1-((RSSModel2/(length(test$structuretaxvaluedollarcnt)-length(summary(model2)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model2
#Model 3
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
#library(MASS)
#model.empty = lm(structuretaxvaluedollarcnt.bc ~ 1, data = train)
#model.full = lm(structuretaxvaluedollarcnt.bc ~ ., data = train)
#scope = list(lower = formula(model.empty), upper = formula(model.full))
#model3 = step(model2, scope, direction = "both", k = 2)
#best model based on earlier estimation
model3 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + calculatedfinishedsquarefeet + heatingorsystemtypeid +
poolcnt + yearbuilt  + finishedsquarefeet15  + buildingqualitytypeid+
lotsizesquarefeet + rawcensustractandblock + longitude + latitude + taxdelinquencyyear + Clustering, data = train)
summary(model3)
vif(model3)
BIC(model3)
bptest(model3)
bgtest(model3)
predictedmodel3 = ((predict(model3, newdata = test)*lambda)+1)^(1/lambda)
MSEModel3 <- mean((predictedmodel3 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel3 <- sum((predictedmodel3 - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model3 <- 1-((RSSModel3/(length(test$structuretaxvaluedollarcnt)-length(summary(model3)$coefficients)-1))/(TSS/(length(test$structuretaxvaluedollarcnt)-1)))
AdjR2Model3
# #Correction for heteroskedasticity:
# library(RCurl)
# # import the function from repository
# url_robust <- "https://raw.githubusercontent.com/IsidoreBeautrelet/economictheoryblog/master/robust_summary.R"
# eval(parse(text = getURL(url_robust, ssl.verifypeer = FALSE)),
#      envir=.GlobalEnv)
#
# modelresultsHouseTaxes <- summary(model3, robust=T)
# modelresultsHouseTaxes
##### END MODEL BUILDING HOUSE TAXES ####
##### START MODEL BUILDING LAND TAXES #####
ggplot(housingdataset, aes(propertylandusetypeid, log(landtaxvaluedollarcnt)))+geom_boxplot()+ggtitle("propertylandusetypeid")
ggplot(housingdataset, aes(log(calculatedfinishedsquarefeet), log(landtaxvaluedollarcnt)))+geom_point()+ggtitle("calculatedfinishedsquarefeet")
cor.test(log(housingdataset$landtaxvaluedollarcnt), housingdataset$calculatedfinishedsquarefeet)
#Significant relationship 0.33
set.seed(0)
folds = createFolds(landdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((test$landtaxvaluedollarcnt - mean(test$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
#Model4 Land Tax
model4 <- lm(landtaxvaluedollarcnt ~ propertylandusetypeid + calculatedfinishedsquarefeet + Clustering, data = train)
summary(model4)
vif(model4)
BIC(model4)
bptest(model4)
bgtest(model4)
predictedmodel4 = predict(model4, newdata = test)
MSEModel4 <- mean((predictedmodel4 - test$landtaxvaluedollarcnt)^2)
RSSModel4 <- sum((predictedmodel4 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model4 <- 1-((RSSModel4/(length(test$landtaxvaluedollarcnt)-length(summary(model4)$coefficients)-1))/(TSS/(length(test$landtaxvaluedollarcnt)-1)))
AdjR2Model4
#Model5 Land Tax
bc2 <- boxCox(model4)
lambda2 = bc$x[which(bc2$y == max(bc2$y))]
landtaxvaluedollarcnt.bc = (train$landtaxvaluedollarcnt^lambda2 - 1)/lambda2
model5 <- lm(landtaxvaluedollarcnt.bc ~ propertylandusetypeid + calculatedfinishedsquarefeet + Clustering, data = train)
summary(model5)
vif(model5)
BIC(model5)
bptest(model5)
bgtest(model5)
predictedmodel5 = ((predict(model5, newdata = test)*lambda2)+1)^(1/lambda2)
MSEModel5 <- mean((predictedmodel5 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
RSSModel5 <- sum((predictedmodel5 - test$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model5 <- 1-((RSSModel5/(length(test$landtaxvaluedollarcnt)-length(summary(model5)$coefficients)-1))/(TSS/(length(test$landtaxvaluedollarcnt)-1)))
AdjR2Model5
# #Final Model Land Tax
# modelresultsLandTaxes <- summary(model5, robust=T)
# modelresultsLandTaxes
#######################################################################################################################################################################################
############################################################################### LASSO Regression ######################################################################################
#######################################################################################################################################################################################
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
#House Tax Estimation
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((train$structuretaxvaluedollarcnt - mean(train$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
lassopredictmodel1 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
MSEModel6 <- mean((lassopredictmodel1 - train$structuretaxvaluedollarcnt)^2)
RSSModel6 <- sum((lassopredictmodel1 - train$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model6 <- 1-(RSSModel6/TSS)
AdjR2Model6
#Land tax Estimation
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$structuretaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train <-train[complete.cases(train),]
test <-test[complete.cases(test),]
TSS <- sum((train$landtaxvaluedollarcnt - mean(train$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
x = model.matrix(landtaxvaluedollarcnt ~ ., train)[, -1]
y = train$landtaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
x = model.matrix(landtaxvaluedollarcnt ~ ., train)[, -1]
lassopredictmodel2 = predict(cv.lasso.out, s = bestlambda.lasso, newx = x)
MSEModel7 <- mean((lassopredictmodel2 - train$landtaxvaluedollarcnt)^2)
RSSModel7 <- sum((lassopredictmodel2 - train$landtaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model7 <- 1-(RSSModel7/TSS)
AdjR2Model7
#######################################################################################################################################################################################
################################################################################ Random Forest ########################################################################################
#######################################################################################################################################################################################
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
#Land tax
#Prepared data by removing factors with a higher number of levels
train$regionidzip <- NULL
train$landtaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train$propertycountylandusecode <- NULL
train$transactiondate <- NULL
train <-train[complete.cases(train),]
#Reduce sample size to reduce computation time.
trainForest <- train[1:10000,]
TSS <- sum((trainForest$structuretaxvaluedollarcnt - mean(trainForest$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
#Setting the number of variables
#Cross validation of the number of variables tried at each split
# R2ModelTree <- numeric(29)
# for (i in 1:29) {
#   fit = randomForest(structuretaxvaluedollarcnt ~ ., data = trainForest, mtry = i)
#   RSSRandom <- sum((fit$predicted - trainForest$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
#   R2Random <- 1 - RSSRandom/TSS
#   R2ModelTree[i] <- R2Random
# }
# R2ModelTree
# plot(R2ModelTree, type = 'line')
#Result: 13
#Estimation of the random forest for 13 variables, tested and reduced the number of trees to 100.
fit2 = randomForest(structuretaxvaluedollarcnt ~ ., data = trainForest, ntree=100, mtry = 13)
plot(fit2)
Importance <- data.frame(fit2$importance)
Importance$variables <- rownames(Importance)
arrange(Importance, desc(IncNodePurity))
fit2
AdjR2Model8 <- 0.6837
#Result
# Call:
#   randomForest(formula = structuretaxvaluedollarcnt ~ ., data = trainForest,      ntree = 100, mtry = 13)
# Type of random forest: regression
# Number of trees: 100
# No. of variables tried at each split: 13
#
# Mean of squared residuals: 17689234092
# % Var explained: 61.68
####Land tax####
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train$regionidzip <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train$propertycountylandusecode <- NULL
train$transactiondate <- NULL
train <-train[complete.cases(train),]
#Reduce sample size to reduce computation time.
trainForestland <- train[1:10000,]
TSS <- sum((trainForestland$landtaxvaluedollarcnt - mean(trainForestland$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
#Setting the number of variables
#Cross validation of the number of variables tried at each split
# R2ModelTree <- numeric(29)
# for (i in 1:29) {
#   fit = randomForest(landtaxvaluedollarcnt ~ ., data = trainForestland, mtry = i)
#   RSSRandom <- sum((fit$predicted - trainForestland$landtaxvaluedollarcnt)^2, na.rm = TRUE)
#   R2Random <- 1 - RSSRandom/TSS
#   R2ModelTree[i] <- R2Random
# }
# R2ModelTree
# plot(R2ModelTree, type = 'line')
#Result: 4
#Estimation of the random forest for 4 variables, tested and reduced the number of trees to 100.
fit2 = randomForest(landtaxvaluedollarcnt ~ ., data = trainForestland, ntree=100, mtry = 4)
plot(fit2)
Importance <- data.frame(fit2$importance)
Importance$variables <- rownames(Importance)
arrange(Importance, desc(IncNodePurity))
fit2
AdjR2Model9 <- 0.5168
# Call:
#   randomForest(formula = landtaxvaluedollarcnt ~ ., data = trainForestland,      ntree = 100, mtry = 4)
# Type of random forest: regression
# Number of trees: 100
# No. of variables tried at each split: 4
#
# Mean of squared residuals: 92750699114
# % Var explained: 42.14
#######################################################################################################################################################################################
################################################################################## Boosting ###########################################################################################
#######################################################################################################################################################################################
#Real Estate Taxes
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((train$structuretaxvaluedollarcnt - mean(train$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
Model10 = gbm(structuretaxvaluedollarcnt ~
+ finishedsquarefeet12
+ calculatedfinishedsquarefeet
+ buildingqualitytypeid
+ yearbuilt + bathroomcnt
+ lotsizesquarefeet
+ bedroomcnt + propertylandusetypeid
+ poolcnt + airconditioningtypeid
+ pooltypeid7 + taxdelinquencyyear
+ pooltypeid10 + hashottuborspa
+ heatingorsystemtypeid
+ finishedsquarefeet15 + unitcnt + Clustering,
data = train,
distribution = "gaussian",
n.trees = 5000,
interaction.depth = 10,
shrinkage = 0.01)
RSSModel10 <- sum((predict(Model10, newdata = train, n.trees = 5000) - train$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model10 <- 1-(RSSModel10/TSS)
AdjR2Model10
TSStest <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
RSSModel10test <- sum((predict(Model10, newdata = test, n.trees = 5000) - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
AdjR2Model10test <- 1-(RSSModel10/TSStest)
AdjR2Model10test
#######################################################################################################################################################################################
############################################################################### End of modelling ######################################################################################
#######################################################################################################################################################################################
#### Results
Results <- data.frame(Model = c("Multiple Linear Regression", "MLR Box Coxs", "MLR Stepwise", "Lasso Regression", "Random Forests", "Boosting"),
House_Tax =  round(c(summary(model)$adj.r.squared, summary(model2)$adj.r.squared,summary(model3)$adj.r.squared, AdjR2Model6, AdjR2Model8, AdjR2Model10),3),
Land_Tax = round(c(summary(model4)$adj.r.squared, summary(model5)$adj.r.squared,0, AdjR2Model7, AdjR2Model9, 0),3))
Results[3,3] <- ""
Results
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
bestlambda.lasso
log(bestlambda.lasso)
bestlambda.lasso
bestlambda
lasso.models
lasso.models$dim
lasso.models$beta
lasso.models$df
lasso.models$nobs
lasso.models$call
lasso.models$offset
lasso.models$jerr
coef(cv.lasso.out)
coef(cv.lasso.out)
data.frame(coef(cv.lasso.out))
data <- coef(cv.lasso.out)
data <- data.frame(data)
data
