#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(percentagehous)
rm(dataset)
rm(soldhouses)
rm(MissingValues)
install.packages("xgboost")
library(xgboost)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
?xgboost
bstDense <- xgboost(data = train, max.depth = 2,
eta = 1, nthread = 2, nround = 2, objective = "reg:linear")
bstDense <- xgboost(data = as.matrix(train), max.depth = 2,
eta = 1, nthread = 2, nround = 2, objective = "reg:linear")
as.matrix(train)
labels =
bstDense <- xgboost(data = as.matrix(train) ,max.depth = 2,
eta = 1, nthread = 2, nround = 2, objective = "reg:linear")
labels =
bstDense <- xgboost(data = train ,max.depth = 2,
eta = 1, nthread = 2, nround = 2, objective = "reg:linear")
labels =
bstDense <- xgboost(data = data.matrix(train) ,max.depth = 2,
eta = 1, nthread = 2, nround = 2, objective = "reg:linear")
train[-structuretaxvaluedollarcnt]
train[,-structuretaxvaluedollarcnt]
train[,-train$structuretaxvaluedollarcnt]
labels =
bstDense <- xgboost(data = data.matrix(train[,-train$structuretaxvaluedollarcnt]), label =train$structuretaxvaluedollarcnt  ,max.depth = 2,
eta = 1, nthread = 2, nround = 2, objective = "reg:linear")
labels =
bstDense <- xgboost(data = data.matrix(train[,-train$structuretaxvaluedollarcnt]), label =train$structuretaxvaluedollarcnt  ,max.depth = 2,
eta = 1, nthread = 2, nround = 5, objective = "reg:linear")
bstDense$evaluation_log
bstDense$niter
labels =
bstDense <- xgboost(data = data.matrix(train[,-train$structuretaxvaluedollarcnt]), label =train$structuretaxvaluedollarcnt  ,max.depth = 2,
eta = 1, nthread = 2, nround = 10, objective = "reg:linear")
importance <- xgb.importance(feature_names = sparse_matrix@Dimnames[[2]], model = bstDense)
importance <- xgb.importance(feature_names = train@Dimnames[[2]], model = bstDense)
train@Dimnames
colnames(train)
importance <- xgb.importance(feature_names = colnames(train), model = bstDense)
importance
train[,-train$structuretaxvaluedollarcnt]
labels = train$structuretaxvaluedollarcnt
train$regionidzip <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train$propertycountylandusecode <- NULL
train$transactiondate <- NULL
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 2,
eta = 1, nthread = 2, nround = 10, objective = "reg:linear")
importance <- xgb.importance(feature_names = colnames(train), model = bstDense)
importance
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 2,
eta = 2, nthread = 2, nround = 10, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 3,
eta = 2, nthread = 2, nround = 10, objective = "reg:linear")
bstDense$raw
bstDense$handle
bstDense$niter
bstDense$evaluation_log
min(bstDense$evaluation_log)
min(bstDense$evaluation_log$train_rmse)
predict(bstDense, newx = test)
predict(bstDense, newdata = test)
predict(bstDense, newdata = data.matrix(test))
predict(bstDense, newdata = data.matrix(test), ntreelimit=n)
predict(bstDense, newdata = data.matrix(test))
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 1,
eta = 2, nthread = 2, nround = 3, objective = "reg:linear")
predict(bstDense, newdata = data.matrix(test))
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 4,
eta = 5, nthread = 4, nround = 30, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 4,
eta = 1, nthread = 4, nround = 30, objective = "reg:linear")
predict(bstDense, newdata = data.matrix(test))
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 4,
eta = 1, nthread = 4, nround = 100, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 10,
eta = 1, nthread = 4, nround = 100, objective = "reg:linear")
predict(bstDense, newdata = data.matrix(test))
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 10,
eta = 1, nthread = 4, nround = 200, objective = "reg:linear")
importance <- xgb.importance(feature_names = colnames(train), model = bstDense)
min(bstDense$evaluation_log$train_rmse)
predict(bstDense, newdata = data.matrix(test))
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 10,
eta = 1, nthread = 4, nround = 400, objective = "reg:linear")
importance <- xgb.importance(feature_names = colnames(train), model = bstDense)
predict(bstDense, newdata = data.matrix(test))
TSS <- sum((test$landtaxvaluedollarcnt - mean(test$landtaxvaluedollarcnt, na.rm =  TRUE))^2)
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
RSSXGB <- sum((predict(bstDense, newdata = data.matrix(test))- test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2 <- 1 - RSSXGB/TSS
R2
RSSXGB
TSS
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 10,
eta = 1, nthread = 4, nround = 100, objective = "reg:linear")
RSSXGB <- sum((predict(bstDense, newdata = data.matrix(test))- test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2 <- 1 - RSSXGB/TSS
R2
RSSXGB
TSS
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 10,
eta = 1, nthread = 4, nround = 10, objective = "reg:linear")
RSSXGB <- sum((predict(bstDense, newdata = data.matrix(test))- test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2 <- 1 - RSSXGB/TSS
R2
predict(bstDense, newdata = data.matrix(test)[1]
predict(bstDense, newdata = data.matrix(test)[1]
predict(bstDense, newdata = data.matrix(test)
predict(bstDense, newdata = data.matrix(test))[1]
predict(bstDense, newdata = data.matrix(test))
predict(bstDense, newdata = data.matrix(test))[1]
test$structuretaxvaluedollarcnt[1]
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 10,
eta = 1, nthread = 4, nround = 100, objective = "reg:linear")
predict(bstDense, newdata = data.matrix(test))[1]
test$structuretaxvaluedollarcnt[1]
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6,
eta = 0.3, nthread = 4, nround = 100, objective = "reg:linear")
RSSXGB <- sum((predict(bstDense, newdata = data.matrix(test))- test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2 <- 1 - RSSXGB/TSS
R2
XGprediction <- predict(bstDense, newdata = data.matrix(test))
RSSXGB <- sum((XGprediction- test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2 <- 1 - RSSXGB/TSS
R2
summary(XGprediction)
summary(test$structuretaxvaluedollarcnt)
importance <- xgb.importance(feature_names = colnames(train), model = bstDense)
importance
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
labels = train$structuretaxvaluedollarcnt
train$regionidzip <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$landtaxvaluedollarcnt
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train$propertycountylandusecode <- NULL
train$transactiondate <- NULL
labels = train$structuretaxvaluedollarcnt
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
labels = train$structuretaxvaluedollarcnt
train$regionidzip <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$landtaxvaluedollarcnt <-NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train$propertycountylandusecode <- NULL
train$transactiondate <- NULL
labels = train$structuretaxvaluedollarcnt
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6,
eta = 0.3, nthread = 4, nround = 100, objective = "reg:linear")
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
labels = train$structuretaxvaluedollarcnt
train$regionidzip <- NULL
train$structuretaxvaluedollarcnt <- NULL
train$landtaxvaluedollarcnt <-NULL
train$taxamount <- NULL
train$taxvaluedollarcnt <- NULL
train$logerror <- NULL
train$censustractandblock <- NULL
train$propertycountylandusecode <- NULL
train$transactiondate <- NULL
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6,
eta = 0.3, nthread = 4, nround = 100, objective = "reg:linear")
XGprediction <- predict(bstDense, newdata = data.matrix(test))
RSSXGB <- sum((XGprediction- test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
RSSXGB
TSS
R2 <- 1 - RSSXGB/TSS
R2
XGprediction <- predict(bstDense, newdata = data.matrix(train))
RSSXGB <- sum((XGprediction - labels)^2, na.rm = TRUE)
RSSXGB
TSS
R2 <- 1 - RSSXGB/TSS
R2
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6, print_every_n = FALSE
eta = 0.3, nthread = 4, nround = 200, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6, print_every_n = FALSE,
eta = 0.3, nthread = 4, nround = 200, objective = "reg:linear")
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = 6, verbose = 0,
eta = 0.3, nthread = 4, nround = 200, objective = "reg:linear")
testtingd = []
testtingd = []
testtingd <- []
testtingd <- [0]
testtingd <- []
testtingd <- c()
testtingd
testtingd + 1
RTrain <- c(RTrain, R2train)
RTrain <- c()
RTrain <- c(RTrain, R2train)
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
for (z in 0.1:0.6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt =+ 1
print("itteration" + str(itt))
}
}
print("itteration" + itt)
print(paste("itteration: ", itt))
print(paste("Ttteration: ", itt))
for (z in 0.1:0.6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt =+ 1
print(paste("Itteration: ", itt))
}
}
for (z in 0.1:0.6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(RTest)
print(RTrain)
}
}
R2train
RTest <- c(RTest, R2test)
RTest
testtingd <- c()
R2train
RTest <- c(RTest, R2test)
RTest
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 200, objective = "reg:linear")
for (z in 1:6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
for (z in 1:6){
for (i in 1:6){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 200, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
RTrain
resultsXG <- rbind(Depth, Eta, RTrain, RTest)
resultsXG
resultsXG <- cbind(Depth, Eta, RTrain, RTest)
resultsXG
ggplot(resultsXG, aes(x=RTrain, y=RTest))+geom_line()
ggplot(resultsXG, aes(x=RTrain, y=RTest))+geom_point()
resultsXG <- data.frame(cbind(Depth, Eta, RTrain, RTest))
resultsXG
ggplot(resultsXG, aes(x=RTrain, y=RTest))+geom_point()
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth))+geom_point()
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth))+geom_point()+ggtitle("Xgboost Results")
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, fill= Eta))+geom_point()+ggtitle("Xgboost Results")
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, shape= Eta))+geom_point()+ggtitle("Xgboost Results")
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, size= Eta))+geom_point()+ggtitle("Xgboost Results")
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
for (z in 1:10){
for (i in 1:10){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = 300, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
Depth <- c(Depth, i)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
resultsXG <- data.frame(cbind(Depth, Eta, RTrain, RTest))
resultsXG
ggplot(resultsXG, aes(x=RTrain, y=RTest, color=Depth, size= Eta))+geom_point()+ggtitle("Xgboost Results")
arrange(resultsXG, RTest)
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
Nround <- c()
for (x in 1:5){
for (z in 1:10){
for (i in 1:10){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
R2train <- 1 - RSSXGBtrain/TSS
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
RTest <- c(RTest, R2test)
Nround <- c(Nround, x)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
}
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
Nround <- c()
for (x in 1:5){
for (z in 1:10){
for (i in 1:10){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
TSS <- sum((labels - mean(labels, na.rm =  TRUE))^2)
R2train <- 1 - RSSXGBtrain/TSS
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
RTest <- c(RTest, R2test)
Nround <- c(Nround, x)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
}
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear", eval_metric = "logloss")
RTrain <- c()
RTest <- c()
Depth <- c()
Eta <- c()
itt <- 0
Nround <- c()
for (x in 1:2){
for (z in 1:3){
for (i in 1:3){
bstDense <- xgboost(data = data.matrix(train), label = labels ,max.depth = i, verbose = 0,
eta = z/10, nthread = 4, nround = x*100, objective = "reg:linear", eval_metric = "logloss")
XGpredictionTrain <- predict(bstDense, newdata = data.matrix(train))
XGpredictionTest <- predict(bstDense, newdata = data.matrix(test))
RSSXGBtrain <- sum((XGpredictionTrain - labels)^2, na.rm = TRUE)
RSSXGBtest <- sum((XGpredictionTest - test$structuretaxvaluedollarcnt)^2, na.rm = TRUE)
TSS <- sum((labels - mean(labels, na.rm =  TRUE))^2)
R2train <- 1 - RSSXGBtrain/TSS
TSS <- sum((test$structuretaxvaluedollarcnt - mean(test$structuretaxvaluedollarcnt, na.rm =  TRUE))^2)
R2test <- 1 - RSSXGBtest/TSS
RTrain <- c(RTrain, R2train)
RTest <- c(RTest, R2test)
RTest <- c(RTest, R2test)
Nround <- c(Nround, x)
Eta <- c(Eta, z)
itt = itt + 1
print(paste("Itteration: ", itt))
print(R2train)
print(R2test)
}
}
}
bst.cv = xgb.cv(param=param, data = as.matrix(train), label = labels, nfold = 10, nrounds = 20)
param <- list("objective" = "reg:linear",
"eval_metric" = "logloss",
"eta" = 1, "max.depth" = 2)
bst.cv = xgb.cv(param=param, data = as.matrix(train), label = labels, nfold = 10, nrounds = 20)
install.packages("xgboost", repos="http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
install.packages("xgboost", repos = "http://dmlc.ml/drat/", type = "source")
library(xgboost)
param <- list("objective" = "reg:linear",
"eval_metric" = "logloss",
"eta" = 1, "max.depth" = 2)
bst.cv = xgb.cv(param=param, data = as.matrix(train), label = labels, nfold = 10, nrounds = 20)
install.packages("xgboost")
install.packages("xgboost")
install.packages("xgboost")
install.packages("xgboost")
library(xgboost)
install.packages("xgboost")
install.packages("xgboost")
