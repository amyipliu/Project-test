data = dataset,
kernel = "linear",
cost = svm_training$best.parameters)
length(svm.mmc.alldata$index)
svm.mmc.alldata$index
data.frame(svm.mmc.alldata$index)
svm.mmc.alldata$performance$error
svm.mmc.alldata$degree
summary(svm.mmc.alldata)
svm.mmc.alldata$cost
svm.mmc.alldata$gamma
svm.mmc.alldata$coef0
svm.mmc.alldata$rho
?svm
svm_alldatat = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = svm_training$best.parameters))))
svm_alldatat = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = svm_training$best.parameters)))
svm_alldatat = tune(svm,
quality ~ .,
data = train,
kernel = "linear",
ranges = list(cost = svm_training$best.parameters))
length(svm.mmc.alldata$index)
svm.mmc.alldata$rho
svm.mmc.alldata$epsilon
length(svm_alldatat$index)
summary(svm.mmc.alldata)
plot(model, dataset, free.sulfur.dioxide ~
total.sulfur.dioxide)
plot(svm.mmc.alldata, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm_training, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm.mmc.linear, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
set.seed(0)
x1 = c(rnorm(100, 0, 4), rnorm(100, 1, 3))
x2 = c(rnorm(100, 0, 1), rnorm(100, 6, 1))
y = as.factor(c(rep(-1, 100), rep(1, 100)))
linearly.separable = data.frame(x1, x2, y)
plot(linearly.separable$x1, linearly.separable$x2, col = linearly.separable$y)
set.seed(0)
train.index = sample(1:200, 200*.8)
test.index = -train.index
library(e1071)
svm.mmc.linear = svm(y ~ ., #Familiar model fitting notation.
data = linearly.separable, #Using the linearly separable data.
subset = train.index, #Using the training data.
kernel = "linear", #Using a linear kernel.
cost = 1e6) #A very large cost; default is 1.
plot(svm.mmc.linear, linearly.separable[train.index, ])
plot(svm.mmc.linear, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm_training, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
plot(svm.mmc.linear, dataset, free.sulfur.dioxide ~ total.sulfur.dioxide)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(tabplot)
library(corrplot)
#Open Data Set ##Set your file location of the properties data set##
dataset <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/properties_2016.csv")
soldhouses <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/train_2016_v2.csv", header = TRUE)
dataset <- as.data.frame(left_join(soldhouses, dataset, by ="parcelid"))
#Remove completely missing rows from the dataset
dataset <- dataset[!is.na(dataset$regionidcounty),]
dataset <- dataset[dataset$regionidcounty==3101,]
#Remove rows that have empty taxvaluedollarcnt as these cannot be predicted
dataset <- dataset[!is.na(dataset$taxvaluedollarcnt),]
#Create table with comparison on missing values
precentageall <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Imputate missing values and transformation of variables
dataset[is.na(dataset$fireplaceflag),"fireplaceflag"] <- 0
dataset[is.na(dataset$fullbathcnt),"fullbathcnt"] <- 0
dataset[is.na(dataset$garagecarcnt),"garagecarcnt"] <- 0
dataset[is.na(dataset$garagetotalsqft),"garagetotalsqft"] <- 0
dataset[is.na(dataset$hashottuborspa),"hashottuborspa"] <- 0
dataset[is.na(dataset$heatingorsystemtypeid),"heatingorsystemtypeid"] <- 0
dataset[is.na(dataset$latitude),"latitude"] <- 0
dataset[is.na(dataset$longitude),"longitude"] <- 0
dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Compute missing values in the cleaned data set
precentageallclean <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
classtest <- data.frame(lapply(dataset, function(x) class(x)))
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
housingdataset$airconditioningtypeid <- as.character(housingdataset$airconditioningtypeid)
housingdataset$heatingorsystemtypeid <- as.character(housingdataset$heatingorsystemtypeid)
housingdataset[housingdataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
housingdataset[housingdataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
housingdataset[housingdataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
housingdataset[housingdataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
housingdataset[housingdataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
housingdataset[housingdataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
housingdataset[housingdataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
housingdataset[housingdataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
housingdataset$heatingorsystemtypeid <- factor(housingdataset$heatingorsystemtypeid)
housingdataset$airconditioningtypeid <- factor(housingdataset$airconditioningtypeid)
housingdataset[housingdataset$propertylandusetypeid==31, "propertylandusetypeid"] <-"Commercial/Office/Residential Mixed Used"
housingdataset[housingdataset$propertylandusetypeid==47, "propertylandusetypeid"] <-"Store/Office (Mixed Use)"
housingdataset[housingdataset$propertylandusetypeid==246, "propertylandusetypeid"] <-"Duplex"
housingdataset[housingdataset$propertylandusetypeid==247, "propertylandusetypeid"] <-"Triplex"
housingdataset[housingdataset$propertylandusetypeid==248, "propertylandusetypeid"] <-"Quadruplex"
housingdataset[housingdataset$propertylandusetypeid==260, "propertylandusetypeid"] <-"Residential General"
housingdataset[housingdataset$propertylandusetypeid==261, "propertylandusetypeid"] <-"Single Family Residential"
housingdataset[housingdataset$propertylandusetypeid==263, "propertylandusetypeid"] <-"Mobile Home"
housingdataset[housingdataset$propertylandusetypeid==264, "propertylandusetypeid"] <-"Townhouse"
housingdataset[housingdataset$propertylandusetypeid==266, "propertylandusetypeid"] <-"Condominium"
housingdataset[housingdataset$propertylandusetypeid==267, "propertylandusetypeid"] <-"Cooperative"
housingdataset[housingdataset$propertylandusetypeid==269, "propertylandusetypeid"] <-"Planned Unit Development"
housingdataset$propertylandusetypeid <- factor(housingdataset$propertylandusetypeid)
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Create land dataset on rule ....
landdataset <- dataset[!is.na(dataset$regionidzip) & !is.na(dataset$yearbuilt),]
percentageland <- data.frame(lapply(dataset$landdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(precentageall)
rm(precentageallclean)
rm(percentagehous)
rm(percentageland)
rm(classtest)
rm(dataset)
rm(soldhouses)
library(data.table)
library(ggplot2)
library(plyr)
library(dplyr)
library(tabplot)
library(corrplot)
#Open Data Set ##Set your file location of the properties data set##
dataset <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/properties_2016.csv")
soldhouses <- fread("C:/Users/Steven Jongerden/Desktop/Machine Learning/Data/train_2016_v2.csv", header = TRUE)
dataset <- as.data.frame(left_join(soldhouses, dataset, by ="parcelid"))
#Remove completely missing rows from the dataset
dataset <- dataset[!is.na(dataset$regionidcounty),]
dataset <- dataset[dataset$regionidcounty==3101,]
#Remove rows that have empty taxvaluedollarcnt as these cannot be predicted
dataset <- dataset[!is.na(dataset$taxvaluedollarcnt),]
#Create table with comparison on missing values
precentageall <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Imputate missing values and transformation of variables
dataset[is.na(dataset$fireplaceflag),"fireplaceflag"] <- 0
dataset[is.na(dataset$fullbathcnt),"fullbathcnt"] <- 0
dataset[is.na(dataset$garagecarcnt),"garagecarcnt"] <- 0
dataset[is.na(dataset$garagetotalsqft),"garagetotalsqft"] <- 0
dataset[is.na(dataset$hashottuborspa),"hashottuborspa"] <- 0
dataset[is.na(dataset$heatingorsystemtypeid),"heatingorsystemtypeid"] <- 0
dataset[is.na(dataset$latitude),"latitude"] <- 0
dataset[is.na(dataset$longitude),"longitude"] <- 0
dataset[is.na(dataset$lotsizesquarefeet),"lotsizesquarefeet"] <- 0
dataset[is.na(dataset$numberofstories),"numberofstories"] <- 0
dataset[is.na(dataset$poolcnt),"poolcnt"] <- 0
dataset[is.na(dataset$poolsizesum),"poolsizesum"] <- 0
dataset[is.na(dataset$pooltypeid10),"pooltypeid10"] <- 0
dataset[is.na(dataset$pooltypeid2),"pooltypeid2"] <- 0
dataset[is.na(dataset$pooltypeid7),"pooltypeid7"] <- 0
dataset[is.na(dataset$propertycountylandusecode),"propertycountylandusecode"] <- 0
dataset[is.na(dataset$propertylandusetypeid),"propertylandusetypeid"] <- 0
dataset[is.na(dataset$propertyzoningdesc),"propertyzoningdesc"] <- "Other"
dataset[is.na(dataset$roomcnt),"roomcnt"] <- 0
dataset[is.na(dataset$storytypeid),"storytypeid"] <- 0
dataset[is.na(dataset$typeconstructiontypeid),"typeconstructiontypeid"] <- 0
dataset[is.na(dataset$yardbuildingsqft17),"yardbuildingsqft17"] <- 0
dataset[is.na(dataset$yardbuildingsqft26),"yardbuildingsqft26"] <- 0
dataset[is.na(dataset$fireplacecnt),"fireplacecnt"] <- 0
dataset[is.na(dataset$airconditioningtypeid),"airconditioningtypeid"] <- 0
dataset[is.na(dataset$architecturalstyletypeid),"architecturalstyletypeid"] <- 0
dataset[is.na(dataset$basementsqft),"basementsqft"] <- 0
dataset[is.na(dataset$bathroomcnt),"bathroomcnt"] <- 0
dataset[is.na(dataset$bedroomcnt),"bedroomcnt"] <- 0
dataset[is.na(dataset$buildingqualitytypeid),"buildingqualitytypeid"] <- 0
dataset[is.na(dataset$buildingclasstypeid),"buildingclasstypeid"] <- 0
dataset[is.na(dataset$calculatedbathnbr),"calculatedbathnbr"] <- 0
dataset[is.na(dataset$decktypeid),"decktypeid"] <- 0
dataset[is.na(dataset$threequarterbathnbr),"threequarterbathnbr"] <- 0
dataset[is.na(dataset$finishedfloor1squarefeet),"finishedfloor1squarefeet"] <- 0
dataset[is.na(dataset$calculatedfinishedsquarefeet),"calculatedfinishedsquarefeet"] <- 0
dataset[is.na(dataset$finishedsquarefeet6),"finishedsquarefeet6"] <- 0
dataset[is.na(dataset$finishedsquarefeet12),"finishedsquarefeet12"] <- 0
dataset[is.na(dataset$finishedsquarefeet13),"finishedsquarefeet13"] <- 0
dataset[is.na(dataset$finishedsquarefeet15),"finishedsquarefeet15"] <- 0
dataset[is.na(dataset$finishedsquarefeet50),"finishedsquarefeet50"] <- 0
dataset[is.na(dataset$unitcnt),"unitcnt"] <- 0
dataset[is.na(dataset$structuretaxvaluedollarcnt),"structuretaxvaluedollarcnt"] <- dataset[is.na(dataset$structuretaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$structuretaxvaluedollarcnt),"landtaxvaluedollarcnt"]
dataset[is.na(dataset$landtaxvaluedollarcnt),"landtaxvaluedollarcnt"] <- dataset[is.na(dataset$landtaxvaluedollarcnt),"taxvaluedollarcnt"] - dataset[is.na(dataset$landtaxvaluedollarcnt),"structuretaxvaluedollarcnt"]
dataset$propertyzoningdesc = as.character(dataset$propertyzoningdesc)
dataset$propertyzoningdesc = factor(dataset$propertyzoningdesc)
dataset$regionidcounty <- factor(dataset$regionidcounty)
dataset$regionidcity <- factor(dataset$regionidcity)
dataset$regionidzip <- factor(dataset$regionidzip)
dataset$regionidneighborhood <- factor(dataset$regionidneighborhood)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset$architecturalstyletypeid <- factor(dataset$architecturalstyletypeid)
dataset$buildingclasstypeid <- factor(dataset$buildingclasstypeid)
dataset$decktypeid <- factor(dataset$decktypeid)
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$pooltypeid10 <- factor(dataset$pooltypeid10)
dataset$pooltypeid2 <- factor(dataset$pooltypeid2)
dataset$pooltypeid7 <- factor(dataset$pooltypeid7)
dataset$storytypeid <- factor(dataset$storytypeid)
dataset$typeconstructiontypeid <- factor(dataset$typeconstructiontypeid)
dataset <- dataset[!is.na(dataset$structuretaxvaluedollarcnt),]
dataset <- dataset[!is.na(dataset$landtaxvaluedollarcnt),]
#Compute missing values in the cleaned data set
precentageallclean <- data.frame(lapply(dataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
classtest <- data.frame(lapply(dataset, function(x) class(x)))
#Remove columns that are empty, and have no information
dataset$architecturalstyletypeid <- NULL
dataset$basementsqft<- NULL
dataset$decktypeid<- NULL
dataset$finishedfloor1squarefeet<- NULL
dataset$finishedsquarefeet13<- NULL
dataset$finishedsquarefeet50<- NULL
dataset$finishedsquarefeet6<- NULL
dataset$fireplacecnt<- NULL
dataset$garagecarcnt<- NULL
dataset$poolsizesum<- NULL
dataset$pooltypeid2<- NULL
dataset$regionidcity<- NULL
dataset$regionidneighborhood<- NULL
dataset$roomcnt<- NULL
dataset$storytypeid<- NULL
dataset$threequarterbathnbr<- NULL
dataset$typeconstructiontypeid<- NULL
dataset$yardbuildingsqft17<- NULL
dataset$yardbuildingsqft26<- NULL
dataset$fips <-NULL
dataset$regionidcounty <- NULL
dataset$airconditioningtypeid <- as.character(dataset$airconditioningtypeid)
dataset$heatingorsystemtypeid <- as.character(dataset$heatingorsystemtypeid)
dataset[dataset$airconditioningtypeid==0,"airconditioningtypeid"] <- "None"
dataset[dataset$airconditioningtypeid==1,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==9,"airconditioningtypeid"] <- "Central"
dataset[dataset$airconditioningtypeid==13,"airconditioningtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==2,"heatingorsystemtypeid"] <- "Central"
dataset[dataset$heatingorsystemtypeid==7,"heatingorsystemtypeid"] <- "Floor"
dataset[dataset$heatingorsystemtypeid==0,"heatingorsystemtypeid"] <- "Other"
dataset[dataset$heatingorsystemtypeid==20,"heatingorsystemtypeid"] <- "Other"
dataset$heatingorsystemtypeid <- factor(dataset$heatingorsystemtypeid)
dataset$airconditioningtypeid <- factor(dataset$airconditioningtypeid)
dataset[dataset$propertylandusetypeid==31, "propertylandusetypeid"] <-"Commercial/Office/Residential Mixed Used"
dataset[dataset$propertylandusetypeid==47, "propertylandusetypeid"] <-"Store/Office (Mixed Use)"
dataset[dataset$propertylandusetypeid==246, "propertylandusetypeid"] <-"Duplex"
dataset[dataset$propertylandusetypeid==247, "propertylandusetypeid"] <-"Triplex"
dataset[dataset$propertylandusetypeid==248, "propertylandusetypeid"] <-"Quadruplex"
dataset[dataset$propertylandusetypeid==260, "propertylandusetypeid"] <-"Residential General"
dataset[dataset$propertylandusetypeid==261, "propertylandusetypeid"] <-"Single Family Residential"
dataset[dataset$propertylandusetypeid==263, "propertylandusetypeid"] <-"Mobile Home"
dataset[dataset$propertylandusetypeid==264, "propertylandusetypeid"] <-"Townhouse"
dataset[dataset$propertylandusetypeid==266, "propertylandusetypeid"] <-"Condominium"
dataset[dataset$propertylandusetypeid==267, "propertylandusetypeid"] <-"Cooperative"
dataset[dataset$propertylandusetypeid==269, "propertylandusetypeid"] <-"Planned Unit Development"
dataset$propertylandusetypeid <- factor(dataset$propertylandusetypeid)
#Create housing dataset on rule roomtcount >0
housingdataset <- dataset[dataset$structuretaxvaluedollarcnt!=0,]
percentagehous <- data.frame(lapply(housingdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
#Create land dataset on rule ....
landdataset <- dataset[!is.na(dataset$regionidzip) & !is.na(dataset$yearbuilt),]
percentageland <- data.frame(lapply(dataset$landdataset, function(x) sum(is.na(x))/(sum(is.na(x))+sum(!is.na(x)))))
rm(precentageall)
rm(precentageallclean)
rm(percentagehous)
rm(percentageland)
rm(classtest)
rm(dataset)
rm(soldhouses)
library(glmnet)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
library(caret)
library(car)
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
train <- train[,c("airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
train <-train[complete.cases(train),]
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
lasso.models
coef(lasso.models)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
bestlambda.lasso
log(bestlambda.lasso)
lasso.bestlambdatrain = predict(lasso.models, s = bestlambda.lasso, newx = test)
lasso.bestlambdatrain = predict(lasso.models, s = -4.60517, newx = test)
lasso.models = glmnet(x, y, alpha = 1, lambda = bestlambda.lasso)
mean((lasso.models - y.test)^2)
mean((lasso.models - test)^2)
mean((lasso.models - test$structuretaxvaluedollarcnt)^2)
lasso.models
lasso.bestlambdatrain = predict(bestlambda.lasso, s = bestlambda.lasso, newx = test)
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test)
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test[-structuretaxvaluedollarcnt])
class9test
class(test)
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = y.test)
?predict
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test)
x = model.matrix(Salary ~ ., Hitters)[, -1] #Dropping the intercept column.
y = Hitters$Salary
library(ISLR)
Hitters = na.omit(Hitters)
help(Hitters)
x = model.matrix(Salary ~ ., Hitters)[, -1] #Dropping the intercept column.
y = Hitters$Salary
train = sample(1:nrow(x), 7*nrow(x)/10)
test = (-train)
y.test = y[test]
length(train)/nrow(x)
length(y.test)/nrow(x)
x[train, ]
test
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
y = train$structuretaxvaluedollarcnt
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
train <-train[complete.cases(train),]
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
y = train$structuretaxvaluedollarcnt
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
train <-train[complete.cases(train),]
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1] #Dropping the intercept column.
y = train$structuretaxvaluedollarcnt
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test)
library(caret)
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test)
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newdata = test)
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test)
class(bestlambda.lasso)
library(caret)
predict(cv.lasso.out, newdata = test)
predict(cv.lasso.out, newx = test)
newX <- model.matrix(~.-y,data=test)
y = train$structuretaxvaluedollarcnt
newX <- model.matrix(~.-y,data=test)
newX <- model.matrix(~.-structuretaxvaluedollarcnt,data=test)
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
newx = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
test <-test(train),]
test <-test[(train),]
test <-test[complete.cases(train),]
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
newX <- model.matrix(~.-structuretaxvaluedollarcnt,data=test)
test <- test[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
set.seed(0)
folds = createFolds(housingdataset$parcelid, 5)
test = housingdataset[folds[[1]], ]
train = housingdataset[-folds[[1]], ]
train <- train[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
test <- test[,c("structuretaxvaluedollarcnt", "airconditioningtypeid", "bathroomcnt", "bedroomcnt",
"calculatedfinishedsquarefeet", "heatingorsystemtypeid", "poolcnt", "yearbuilt",
"unitcnt", "propertylandusetypeid","regionidzip")]
train <-train[complete.cases(train),]
test <-test[complete.cases(train),]
test <-test[complete.cases(test),]
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lasso.bestlambdatrain = predict(bestlambda.lasso, s = -4.60517, newx = test)
lasso.bestlambdatrain = predict(cv.lasso.out, s = -4.60517, newx = test)
plot(cv.lasso.out, main = "Lasso Regression\n")
bestlambda.lasso = cv.lasso.out$lambda.min
bestlambda.lasso
log(bestlambda.lasso)
newx = model.matrix(structuretaxvaluedollarcnt ~ ., test)[, -1]
lasso.bestlambdatrain = predict(cv.lasso.out, s = -4.60517, newx = newx)
mean((lasso.models - test$structuretaxvaluedollarcnt)^2)
mean((lasso.bestlambdatrain - test$structuretaxvaluedollarcnt)^2)
lasso.bestlambdatrain
lasso.bestlambdatrain
mean((lasso.bestlambdatrain - test$structuretaxvaluedollarcnt)^2)
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt + regionidzip, data = train)
summary(model)
AIC(cv.lasso.out)
mean((lasso.bestlambdatrain - test$structuretaxvaluedollarcnt)^2)
x = model.matrix(structuretaxvaluedollarcnt ~ ., train)[, -1]
y = train$structuretaxvaluedollarcnt
grid = 10^seq(5, -2, length = 100)
lasso.models = glmnet(x, y, alpha = 1, lambda = grid)
plot(lasso.models, xvar = "lambda", label = TRUE, main = "Lasso Regression")
set.seed(0)
cv.lasso.out = cv.glmnet(x, y, lambda = grid, alpha = 1, nfolds = 10)
plot(cv.lasso.out, main = "Lasso Regression\n")
predictedmodel1 = predict(model, newdata = test)
model2 <- lm(structuretaxvaluedollarcnt.bc~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt  +
propertylandusetypeid + unitcnt , data = train)
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt, data = train)
predictedmodel1 = predict(model, newdata = test)
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt + regionidzip, data = train)
model <- lm(structuretaxvaluedollarcnt~airconditioningtypeid + bathroomcnt + bedroomcnt +
calculatedfinishedsquarefeet + heatingorsystemtypeid + poolcnt + yearbuilt +
+ propertylandusetypeid + unitcnt, data = train)
summary(model)
predictedmodel1 = predict(model, newdata = test)
mean((predictedmodel1 - test$structuretaxvaluedollarcnt)^2)
mean((lasso.bestlambdatrain - test$structuretaxvaluedollarcnt)^2)
